[2019-12-07 01:47:36,359 PID:30200 INFO archival.py load_archive] loading archive file /home/donghoon/.convlab/cache/35863b26c71cbed669f08d3e50030aed24e84e833eb523378b67226d137bedd9.f494dce99f30d2e1786136f7a0a487e643ee8ac430423828d1c0013526d1d7bd
[2019-12-07 01:47:36,362 PID:30200 INFO archival.py load_archive] extracting archive file /home/donghoon/.convlab/cache/35863b26c71cbed669f08d3e50030aed24e84e833eb523378b67226d137bedd9.f494dce99f30d2e1786136f7a0a487e643ee8ac430423828d1c0013526d1d7bd to temp dir /tmp/tmpv8ic0orc
[2019-12-07 01:47:36,457 PID:30200 INFO params.py pop] type = default
[2019-12-07 01:47:36,458 PID:30200 INFO vocabulary.py from_files] Loading token dictionary from /tmp/tmpv8ic0orc/vocabulary.
[2019-12-07 01:47:36,471 PID:30200 INFO from_params.py from_params] instantiating class <class 'allennlp.models.model.Model'> from params {'attention': {'matrix_dim': 400, 'type': 'bilinear', 'vector_dim': 400}, 'attention_for_intent': False, 'attention_for_tag': False, 'context_for_intent': True, 'context_for_tag': False, 'dropout': 0.3, 'encoder': {'bidirectional': True, 'dropout': 0.5, 'hidden_size': 200, 'input_size': 178, 'num_layers': 1, 'type': 'lstm'}, 'include_start_end_transitions': False, 'intent_encoder': {'bidirectional': True, 'dropout': 0.5, 'hidden_size': 200, 'input_size': 400, 'num_layers': 1, 'type': 'lstm'}, 'label_encoding': 'BIO', 'regularizer': [['scalar_parameters', {'alpha': 0.1, 'type': 'l2'}]], 'text_field_embedder': {'token_embedders': {'token_characters': {'embedding': {'embedding_dim': 16}, 'encoder': {'conv_layer_activation': 'relu', 'embedding_dim': 16, 'ngram_filter_sizes': [3], 'num_filters': 128, 'type': 'cnn'}, 'type': 'character_encoding'}, 'tokens': {'embedding_dim': 50, 'trainable': True, 'type': 'embedding'}}}, 'type': 'milu'} and extras {'vocab': Vocabulary with namespaces:  intent_labels, Size: 111 || labels, Size: 330 || tokens, Size: 18854 || token_characters, Size: 91 || Non Padded Namespaces: {'*labels', '*tags'}}
[2019-12-07 01:47:36,471 PID:30200 INFO params.py pop] model.type = milu
[2019-12-07 01:47:36,471 PID:30200 INFO from_params.py from_params] instantiating class <class 'convlab.modules.nlu.multiwoz.milu.model.MILU'> from params {'attention': {'matrix_dim': 400, 'type': 'bilinear', 'vector_dim': 400}, 'attention_for_intent': False, 'attention_for_tag': False, 'context_for_intent': True, 'context_for_tag': False, 'dropout': 0.3, 'encoder': {'bidirectional': True, 'dropout': 0.5, 'hidden_size': 200, 'input_size': 178, 'num_layers': 1, 'type': 'lstm'}, 'include_start_end_transitions': False, 'intent_encoder': {'bidirectional': True, 'dropout': 0.5, 'hidden_size': 200, 'input_size': 400, 'num_layers': 1, 'type': 'lstm'}, 'label_encoding': 'BIO', 'regularizer': [['scalar_parameters', {'alpha': 0.1, 'type': 'l2'}]], 'text_field_embedder': {'token_embedders': {'token_characters': {'embedding': {'embedding_dim': 16}, 'encoder': {'conv_layer_activation': 'relu', 'embedding_dim': 16, 'ngram_filter_sizes': [3], 'num_filters': 128, 'type': 'cnn'}, 'type': 'character_encoding'}, 'tokens': {'embedding_dim': 50, 'trainable': True, 'type': 'embedding'}}}} and extras {'vocab': Vocabulary with namespaces:  intent_labels, Size: 111 || labels, Size: 330 || tokens, Size: 18854 || token_characters, Size: 91 || Non Padded Namespaces: {'*labels', '*tags'}}
[2019-12-07 01:47:36,472 PID:30200 INFO from_params.py from_params] instantiating class <class 'allennlp.modules.text_field_embedders.text_field_embedder.TextFieldEmbedder'> from params {'token_embedders': {'token_characters': {'embedding': {'embedding_dim': 16}, 'encoder': {'conv_layer_activation': 'relu', 'embedding_dim': 16, 'ngram_filter_sizes': [3], 'num_filters': 128, 'type': 'cnn'}, 'type': 'character_encoding'}, 'tokens': {'embedding_dim': 50, 'trainable': True, 'type': 'embedding'}}} and extras {'vocab': Vocabulary with namespaces:  intent_labels, Size: 111 || labels, Size: 330 || tokens, Size: 18854 || token_characters, Size: 91 || Non Padded Namespaces: {'*labels', '*tags'}}
[2019-12-07 01:47:36,472 PID:30200 INFO params.py pop] model.text_field_embedder.type = basic
[2019-12-07 01:47:36,472 PID:30200 INFO params.py pop] model.text_field_embedder.embedder_to_indexer_map = None
[2019-12-07 01:47:36,472 PID:30200 INFO params.py pop] model.text_field_embedder.allow_unmatched_keys = False
[2019-12-07 01:47:36,472 PID:30200 INFO from_params.py from_params] instantiating class <class 'allennlp.modules.token_embedders.token_embedder.TokenEmbedder'> from params {'embedding': {'embedding_dim': 16}, 'encoder': {'conv_layer_activation': 'relu', 'embedding_dim': 16, 'ngram_filter_sizes': [3], 'num_filters': 128, 'type': 'cnn'}, 'type': 'character_encoding'} and extras {'vocab': Vocabulary with namespaces:  intent_labels, Size: 111 || labels, Size: 330 || tokens, Size: 18854 || token_characters, Size: 91 || Non Padded Namespaces: {'*labels', '*tags'}}
[2019-12-07 01:47:36,472 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.type = character_encoding
[2019-12-07 01:47:36,472 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.embedding.num_embeddings = None
[2019-12-07 01:47:36,473 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.embedding.vocab_namespace = token_characters
[2019-12-07 01:47:36,473 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.embedding.embedding_dim = 16
[2019-12-07 01:47:36,473 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.embedding.pretrained_file = None
[2019-12-07 01:47:36,473 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.embedding.projection_dim = None
[2019-12-07 01:47:36,473 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.embedding.trainable = True
[2019-12-07 01:47:36,473 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.embedding.padding_index = None
[2019-12-07 01:47:36,473 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.embedding.max_norm = None
[2019-12-07 01:47:36,473 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.embedding.norm_type = 2.0
[2019-12-07 01:47:36,473 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.embedding.scale_grad_by_freq = False
[2019-12-07 01:47:36,473 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.embedding.sparse = False
[2019-12-07 01:47:36,474 PID:30200 INFO from_params.py from_params] instantiating class <class 'allennlp.modules.seq2vec_encoders.seq2vec_encoder.Seq2VecEncoder'> from params {'conv_layer_activation': 'relu', 'embedding_dim': 16, 'ngram_filter_sizes': [3], 'num_filters': 128, 'type': 'cnn'} and extras {}
[2019-12-07 01:47:36,474 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.encoder.type = cnn
[2019-12-07 01:47:36,474 PID:30200 INFO from_params.py from_params] instantiating class <class 'allennlp.modules.seq2vec_encoders.cnn_encoder.CnnEncoder'> from params {'conv_layer_activation': 'relu', 'embedding_dim': 16, 'ngram_filter_sizes': [3], 'num_filters': 128} and extras {}
[2019-12-07 01:47:36,474 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.encoder.embedding_dim = 16
[2019-12-07 01:47:36,474 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.encoder.num_filters = 128
[2019-12-07 01:47:36,474 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.encoder.ngram_filter_sizes = [3]
[2019-12-07 01:47:36,474 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.encoder.conv_layer_activation = relu
[2019-12-07 01:47:36,475 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.encoder.output_dim = None
[2019-12-07 01:47:36,476 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.dropout = 0.0
[2019-12-07 01:47:36,477 PID:30200 INFO from_params.py from_params] instantiating class <class 'allennlp.modules.token_embedders.token_embedder.TokenEmbedder'> from params {'embedding_dim': 50, 'trainable': True, 'type': 'embedding'} and extras {'vocab': Vocabulary with namespaces:  intent_labels, Size: 111 || labels, Size: 330 || tokens, Size: 18854 || token_characters, Size: 91 || Non Padded Namespaces: {'*labels', '*tags'}}
[2019-12-07 01:47:36,477 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.tokens.type = embedding
[2019-12-07 01:47:36,477 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.tokens.num_embeddings = None
[2019-12-07 01:47:36,477 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.tokens.vocab_namespace = tokens
[2019-12-07 01:47:36,477 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.tokens.embedding_dim = 50
[2019-12-07 01:47:36,477 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.tokens.pretrained_file = None
[2019-12-07 01:47:36,477 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.tokens.projection_dim = None
[2019-12-07 01:47:36,477 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.tokens.trainable = True
[2019-12-07 01:47:36,477 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.tokens.padding_index = None
[2019-12-07 01:47:36,477 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.tokens.max_norm = None
[2019-12-07 01:47:36,477 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.tokens.norm_type = 2.0
[2019-12-07 01:47:36,477 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.tokens.scale_grad_by_freq = False
[2019-12-07 01:47:36,478 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.tokens.sparse = False
[2019-12-07 01:47:36,484 PID:30200 INFO from_params.py from_params] instantiating class <class 'allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder'> from params {'bidirectional': True, 'dropout': 0.5, 'hidden_size': 200, 'input_size': 178, 'num_layers': 1, 'type': 'lstm'} and extras {'vocab': Vocabulary with namespaces:  intent_labels, Size: 111 || labels, Size: 330 || tokens, Size: 18854 || token_characters, Size: 91 || Non Padded Namespaces: {'*labels', '*tags'}}
[2019-12-07 01:47:36,484 PID:30200 INFO params.py pop] model.encoder.type = lstm
[2019-12-07 01:47:36,484 PID:30200 INFO params.py pop] model.encoder.batch_first = True
[2019-12-07 01:47:36,484 PID:30200 INFO params.py pop] model.encoder.stateful = False
[2019-12-07 01:47:36,484 PID:30200 INFO params.py as_dict] Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
[2019-12-07 01:47:36,485 PID:30200 INFO params.py as_dict] CURRENTLY DEFINED PARAMETERS: 
[2019-12-07 01:47:36,485 PID:30200 INFO params.py log_recursively] model.encoder.bidirectional = True
[2019-12-07 01:47:36,485 PID:30200 INFO params.py log_recursively] model.encoder.dropout = 0.5
[2019-12-07 01:47:36,485 PID:30200 INFO params.py log_recursively] model.encoder.hidden_size = 200
[2019-12-07 01:47:36,485 PID:30200 INFO params.py log_recursively] model.encoder.input_size = 178
[2019-12-07 01:47:36,485 PID:30200 INFO params.py log_recursively] model.encoder.num_layers = 1
[2019-12-07 01:47:36,485 PID:30200 INFO params.py log_recursively] model.encoder.batch_first = True
[2019-12-07 01:47:36,489 PID:30200 INFO from_params.py from_params] instantiating class <class 'allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder'> from params {'bidirectional': True, 'dropout': 0.5, 'hidden_size': 200, 'input_size': 400, 'num_layers': 1, 'type': 'lstm'} and extras {'vocab': Vocabulary with namespaces:  intent_labels, Size: 111 || labels, Size: 330 || tokens, Size: 18854 || token_characters, Size: 91 || Non Padded Namespaces: {'*labels', '*tags'}}
[2019-12-07 01:47:36,490 PID:30200 INFO params.py pop] model.intent_encoder.type = lstm
[2019-12-07 01:47:36,490 PID:30200 INFO params.py pop] model.intent_encoder.batch_first = True
[2019-12-07 01:47:36,490 PID:30200 INFO params.py pop] model.intent_encoder.stateful = False
[2019-12-07 01:47:36,490 PID:30200 INFO params.py as_dict] Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
[2019-12-07 01:47:36,490 PID:30200 INFO params.py as_dict] CURRENTLY DEFINED PARAMETERS: 
[2019-12-07 01:47:36,490 PID:30200 INFO params.py log_recursively] model.intent_encoder.bidirectional = True
[2019-12-07 01:47:36,490 PID:30200 INFO params.py log_recursively] model.intent_encoder.dropout = 0.5
[2019-12-07 01:47:36,490 PID:30200 INFO params.py log_recursively] model.intent_encoder.hidden_size = 200
[2019-12-07 01:47:36,490 PID:30200 INFO params.py log_recursively] model.intent_encoder.input_size = 400
[2019-12-07 01:47:36,490 PID:30200 INFO params.py log_recursively] model.intent_encoder.num_layers = 1
[2019-12-07 01:47:36,490 PID:30200 INFO params.py log_recursively] model.intent_encoder.batch_first = True
[2019-12-07 01:47:36,497 PID:30200 INFO from_params.py from_params] instantiating class <class 'allennlp.modules.attention.attention.Attention'> from params {'matrix_dim': 400, 'type': 'bilinear', 'vector_dim': 400} and extras {'vocab': Vocabulary with namespaces:  intent_labels, Size: 111 || labels, Size: 330 || tokens, Size: 18854 || token_characters, Size: 91 || Non Padded Namespaces: {'*labels', '*tags'}}
[2019-12-07 01:47:36,497 PID:30200 INFO params.py pop] model.attention.type = bilinear
[2019-12-07 01:47:36,497 PID:30200 INFO from_params.py from_params] instantiating class <class 'allennlp.modules.attention.bilinear_attention.BilinearAttention'> from params {'matrix_dim': 400, 'vector_dim': 400} and extras {'vocab': Vocabulary with namespaces:  intent_labels, Size: 111 || labels, Size: 330 || tokens, Size: 18854 || token_characters, Size: 91 || Non Padded Namespaces: {'*labels', '*tags'}}
[2019-12-07 01:47:36,497 PID:30200 INFO params.py pop] model.attention.vector_dim = 400
[2019-12-07 01:47:36,498 PID:30200 INFO params.py pop] model.attention.matrix_dim = 400
[2019-12-07 01:47:36,498 PID:30200 INFO params.py pop] model.attention.normalize = True
[2019-12-07 01:47:36,499 PID:30200 INFO params.py pop] model.context_for_intent = True
[2019-12-07 01:47:36,499 PID:30200 INFO params.py pop] model.context_for_tag = False
[2019-12-07 01:47:36,499 PID:30200 INFO params.py pop] model.attention_for_intent = False
[2019-12-07 01:47:36,499 PID:30200 INFO params.py pop] model.attention_for_tag = False
[2019-12-07 01:47:36,499 PID:30200 INFO params.py pop] model.sequence_label_namespace = labels
[2019-12-07 01:47:36,499 PID:30200 INFO params.py pop] model.intent_label_namespace = intent_labels
[2019-12-07 01:47:36,499 PID:30200 INFO params.py pop] model.label_encoding = BIO
[2019-12-07 01:47:36,500 PID:30200 INFO params.py pop] model.include_start_end_transitions = False
[2019-12-07 01:47:36,500 PID:30200 INFO params.py pop] model.crf_decoding = False
[2019-12-07 01:47:36,500 PID:30200 INFO params.py pop] model.constrain_crf_decoding = None
[2019-12-07 01:47:36,500 PID:30200 INFO params.py pop] model.focal_loss_gamma = None
[2019-12-07 01:47:36,500 PID:30200 INFO params.py pop] model.nongeneral_intent_weight = 5.0
[2019-12-07 01:47:36,500 PID:30200 INFO params.py pop] model.num_train_examples = None
[2019-12-07 01:47:36,500 PID:30200 INFO params.py pop] model.calculate_span_f1 = None
[2019-12-07 01:47:36,500 PID:30200 INFO params.py pop] model.dropout = 0.3
[2019-12-07 01:47:36,500 PID:30200 INFO params.py pop] model.verbose_metrics = False
[2019-12-07 01:47:36,500 PID:30200 INFO params.py pop] model.regularizer = [['scalar_parameters', {'alpha': 0.1, 'type': 'l2'}]]
[2019-12-07 01:47:36,500 PID:30200 INFO params.py pop] model.regularizer.list.list.type = l2
[2019-12-07 01:47:36,555 PID:30200 INFO initializers.py __call__] Initializing parameters
[2019-12-07 01:47:36,556 PID:30200 INFO initializers.py __call__] Done initializing parameters; the following parameters are using their default initialization from their code
[2019-12-07 01:47:36,556 PID:30200 INFO initializers.py __call__]    attention._bias
[2019-12-07 01:47:36,556 PID:30200 INFO initializers.py __call__]    attention._weight_matrix
[2019-12-07 01:47:36,556 PID:30200 INFO initializers.py __call__]    encoder._module.bias_hh_l0
[2019-12-07 01:47:36,556 PID:30200 INFO initializers.py __call__]    encoder._module.bias_hh_l0_reverse
[2019-12-07 01:47:36,556 PID:30200 INFO initializers.py __call__]    encoder._module.bias_ih_l0
[2019-12-07 01:47:36,556 PID:30200 INFO initializers.py __call__]    encoder._module.bias_ih_l0_reverse
[2019-12-07 01:47:36,556 PID:30200 INFO initializers.py __call__]    encoder._module.weight_hh_l0
[2019-12-07 01:47:36,556 PID:30200 INFO initializers.py __call__]    encoder._module.weight_hh_l0_reverse
[2019-12-07 01:47:36,556 PID:30200 INFO initializers.py __call__]    encoder._module.weight_ih_l0
[2019-12-07 01:47:36,556 PID:30200 INFO initializers.py __call__]    encoder._module.weight_ih_l0_reverse
[2019-12-07 01:47:36,556 PID:30200 INFO initializers.py __call__]    intent_encoder._module.bias_hh_l0
[2019-12-07 01:47:36,556 PID:30200 INFO initializers.py __call__]    intent_encoder._module.bias_hh_l0_reverse
[2019-12-07 01:47:36,557 PID:30200 INFO initializers.py __call__]    intent_encoder._module.bias_ih_l0
[2019-12-07 01:47:36,557 PID:30200 INFO initializers.py __call__]    intent_encoder._module.bias_ih_l0_reverse
[2019-12-07 01:47:36,557 PID:30200 INFO initializers.py __call__]    intent_encoder._module.weight_hh_l0
[2019-12-07 01:47:36,557 PID:30200 INFO initializers.py __call__]    intent_encoder._module.weight_hh_l0_reverse
[2019-12-07 01:47:36,557 PID:30200 INFO initializers.py __call__]    intent_encoder._module.weight_ih_l0
[2019-12-07 01:47:36,557 PID:30200 INFO initializers.py __call__]    intent_encoder._module.weight_ih_l0_reverse
[2019-12-07 01:47:36,557 PID:30200 INFO initializers.py __call__]    intent_projection_layer.bias
[2019-12-07 01:47:36,557 PID:30200 INFO initializers.py __call__]    intent_projection_layer.weight
[2019-12-07 01:47:36,557 PID:30200 INFO initializers.py __call__]    tag_projection_layer._module.bias
[2019-12-07 01:47:36,557 PID:30200 INFO initializers.py __call__]    tag_projection_layer._module.weight
[2019-12-07 01:47:36,557 PID:30200 INFO initializers.py __call__]    text_field_embedder.token_embedder_token_characters._embedding._module.weight
[2019-12-07 01:47:36,557 PID:30200 INFO initializers.py __call__]    text_field_embedder.token_embedder_token_characters._encoder._module.conv_layer_0.bias
[2019-12-07 01:47:36,557 PID:30200 INFO initializers.py __call__]    text_field_embedder.token_embedder_token_characters._encoder._module.conv_layer_0.weight
[2019-12-07 01:47:36,557 PID:30200 INFO initializers.py __call__]    text_field_embedder.token_embedder_tokens.weight
[2019-12-07 01:47:36,871 PID:30200 INFO from_params.py from_params] instantiating class <class 'allennlp.data.dataset_readers.dataset_reader.DatasetReader'> from params {'context_size': 5, 'token_indexers': {'token_characters': {'min_padding_length': 3, 'type': 'characters'}, 'tokens': {'lowercase_tokens': True, 'type': 'single_id'}}, 'type': 'milu'} and extras {}
[2019-12-07 01:47:36,871 PID:30200 INFO params.py pop] dataset_reader.type = milu
[2019-12-07 01:47:36,872 PID:30200 INFO from_params.py from_params] instantiating class <class 'convlab.modules.nlu.multiwoz.milu.dataset_reader.MILUDatasetReader'> from params {'context_size': 5, 'token_indexers': {'token_characters': {'min_padding_length': 3, 'type': 'characters'}, 'tokens': {'lowercase_tokens': True, 'type': 'single_id'}}} and extras {}
[2019-12-07 01:47:36,872 PID:30200 INFO params.py pop] dataset_reader.context_size = 5
[2019-12-07 01:47:36,872 PID:30200 INFO params.py pop] dataset_reader.agent = None
[2019-12-07 01:47:36,872 PID:30200 INFO params.py pop] dataset_reader.random_context_size = True
[2019-12-07 01:47:36,872 PID:30200 INFO params.py pop] dataset_reader.token_delimiter = None
[2019-12-07 01:47:36,872 PID:30200 INFO from_params.py from_params] instantiating class allennlp.data.token_indexers.token_indexer.TokenIndexer from params {'min_padding_length': 3, 'type': 'characters'} and extras {}
[2019-12-07 01:47:36,872 PID:30200 INFO params.py pop] dataset_reader.token_indexers.token_characters.type = characters
[2019-12-07 01:47:36,872 PID:30200 INFO from_params.py from_params] instantiating class allennlp.data.token_indexers.token_characters_indexer.TokenCharactersIndexer from params {'min_padding_length': 3} and extras {}
[2019-12-07 01:47:36,872 PID:30200 INFO params.py pop] dataset_reader.token_indexers.token_characters.namespace = token_characters
[2019-12-07 01:47:36,873 PID:30200 INFO params.py pop] dataset_reader.token_indexers.token_characters.start_tokens = None
[2019-12-07 01:47:36,873 PID:30200 INFO params.py pop] dataset_reader.token_indexers.token_characters.end_tokens = None
[2019-12-07 01:47:36,873 PID:30200 INFO params.py pop] dataset_reader.token_indexers.token_characters.min_padding_length = 3
[2019-12-07 01:47:36,873 PID:30200 INFO from_params.py from_params] instantiating class allennlp.data.token_indexers.token_indexer.TokenIndexer from params {'lowercase_tokens': True, 'type': 'single_id'} and extras {}
[2019-12-07 01:47:36,873 PID:30200 INFO params.py pop] dataset_reader.token_indexers.tokens.type = single_id
[2019-12-07 01:47:36,873 PID:30200 INFO from_params.py from_params] instantiating class allennlp.data.token_indexers.single_id_token_indexer.SingleIdTokenIndexer from params {'lowercase_tokens': True} and extras {}
[2019-12-07 01:47:36,873 PID:30200 INFO params.py pop] dataset_reader.token_indexers.tokens.namespace = tokens
[2019-12-07 01:47:36,873 PID:30200 INFO params.py pop] dataset_reader.token_indexers.tokens.lowercase_tokens = True
[2019-12-07 01:47:36,873 PID:30200 INFO params.py pop] dataset_reader.token_indexers.tokens.start_tokens = None
[2019-12-07 01:47:36,873 PID:30200 INFO params.py pop] dataset_reader.token_indexers.tokens.end_tokens = None
[2019-12-07 01:47:36,873 PID:30200 INFO params.py pop] dataset_reader.lazy = False
[2019-12-07 01:47:36,912 PID:30200 INFO multiwoz.py __init__] MultiWozEnv:
- e = 0
- done = False
- env_spec = {'evaluator': {'name': 'MultiWozEvaluator'},
 'max_frame': 1000,
 'max_t': 40,
 'name': 'multiwoz',
 'nlg': {'is_user': True, 'name': 'MultiwozTemplateNLG'},
 'nlu': {'model_file': 'https://convlab.blob.core.windows.net/models/milu.tar.gz',
         'name': 'MILU'},
 'sys_policy': {'name': 'RuleBasedMultiwozBot'},
 'user_policy': {'name': 'UserPolicyAgendaMultiWoz'}}
- log_frequency = None
- frame_op = None
- frame_op_len = None
- normalize_state = False
- reward_scale = None
- num_envs = 1
- eval_frequency = 100
- name = multiwoz
- max_t = 40
- max_frame = 1000
- is_venv = False
- clock_speed = 1
- clock = <convlab.env.base.Clock object at 0x7fee1e2c80b8>
- to_render = False
- action_dim = 0
- observation_dim = 0
- u_env = <convlab.env.multiwoz.MultiWozEnvironment object at 0x7fee56d071d0>
- evaluator = <convlab.evaluator.multiwoz.MultiWozEvaluator object at 0x7feea13b6e80>
- observation_space = Box(0,)
- action_space = Discrete(0)
- observable_dim = {'state': 0}
- is_discrete = True
[2019-12-07 01:47:36,923 PID:30200 INFO modeling_utils.py from_pretrained] loading configuration file models/v4_1/config.json
[2019-12-07 01:47:36,923 PID:30200 INFO modeling_utils.py from_pretrained] Model config {
  "attn_pdrop": 0.1,
  "embd_pdrop": 0.1,
  "finetuning_task": null,
  "initializer_range": 0.02,
  "layer_norm_epsilon": 1e-05,
  "n_ctx": 1024,
  "n_embd": 768,
  "n_head": 12,
  "n_layer": 12,
  "n_positions": 1024,
  "num_labels": 1,
  "output_attentions": true,
  "output_hidden_states": false,
  "resid_pdrop": 0.1,
  "summary_activation": null,
  "summary_first_dropout": 0.1,
  "summary_proj_to_labels": true,
  "summary_type": "token_ids",
  "summary_use_proj": true,
  "torchscript": false,
  "vocab_size": 50365
}

[2019-12-07 01:47:36,924 PID:30200 INFO modeling_utils.py from_pretrained] loading weights file models/v4_1/pytorch_model.bin
[2019-12-07 01:47:40,696 PID:30200 INFO tokenization_utils.py _from_pretrained] Model name 'models/v4_1' not found in model shortcut name list (gpt2, gpt2-medium). Assuming 'models/v4_1' is a path or url to a directory containing tokenizer files.
[2019-12-07 01:47:40,696 PID:30200 INFO tokenization_utils.py _from_pretrained] Didn't find file models/v4_1/added_tokens.json. We won't load it.
[2019-12-07 01:47:40,696 PID:30200 INFO tokenization_utils.py _from_pretrained] Didn't find file models/v4_1/special_tokens_map.json. We won't load it.
[2019-12-07 01:47:40,696 PID:30200 INFO tokenization_utils.py _from_pretrained] loading file None
[2019-12-07 01:47:40,696 PID:30200 INFO tokenization_utils.py _from_pretrained] loading file None
[2019-12-07 01:47:40,696 PID:30200 INFO tokenization_utils.py _from_pretrained] loading file models/v4_1/vocab.json
[2019-12-07 01:47:40,696 PID:30200 INFO tokenization_utils.py _from_pretrained] loading file models/v4_1/merges.txt
[2019-12-07 01:47:40,776 PID:30200 INFO tokenization_utils.py add_tokens] Adding <bos> to the vocabulary
[2019-12-07 01:47:40,776 PID:30200 INFO tokenization_utils.py add_tokens] Adding <eos> to the vocabulary
[2019-12-07 01:47:40,776 PID:30200 INFO tokenization_utils.py add_tokens] Adding <user> to the vocabulary
[2019-12-07 01:47:40,776 PID:30200 INFO tokenization_utils.py add_tokens] Adding <system> to the vocabulary
[2019-12-07 01:47:40,776 PID:30200 INFO tokenization_utils.py add_tokens] Adding <cs> to the vocabulary
[2019-12-07 01:47:40,776 PID:30200 INFO tokenization_utils.py add_tokens] Adding <dp> to the vocabulary
[2019-12-07 01:47:40,776 PID:30200 INFO tokenization_utils.py add_tokens] Adding <pad> to the vocabulary
[2019-12-07 01:47:40,776 PID:30200 INFO tokenization_utils.py add_tokens] Adding <dc> to the vocabulary
[2019-12-07 01:47:40,777 PID:30200 INFO tokenization_utils.py add_tokens] Adding <nm> to the vocabulary
[2019-12-07 01:47:40,777 PID:30200 INFO tokenization_utils.py add_tokens] Adding <leave> to the vocabulary
[2019-12-07 01:47:40,777 PID:30200 INFO tokenization_utils.py add_tokens] Adding <people> to the vocabulary
[2019-12-07 01:47:40,777 PID:30200 INFO tokenization_utils.py add_tokens] Adding <arrive> to the vocabulary
[2019-12-07 01:47:40,777 PID:30200 INFO tokenization_utils.py add_tokens] Adding <pricerange> to the vocabulary
[2019-12-07 01:47:40,777 PID:30200 INFO tokenization_utils.py add_tokens] Adding <arriveby> to the vocabulary
[2019-12-07 01:47:40,777 PID:30200 INFO tokenization_utils.py add_tokens] Adding <ticket> to the vocabulary
[2019-12-07 01:47:40,777 PID:30200 INFO tokenization_utils.py add_tokens] Adding <dest> to the vocabulary
[2019-12-07 01:47:40,777 PID:30200 INFO tokenization_utils.py add_tokens] Adding <none> to the vocabulary
[2019-12-07 01:47:40,777 PID:30200 INFO tokenization_utils.py add_tokens] Adding <leaveat> to the vocabulary
[2019-12-07 01:47:40,777 PID:30200 INFO tokenization_utils.py add_tokens] Adding <car> to the vocabulary
[2019-12-07 01:47:40,777 PID:30200 INFO tokenization_utils.py add_tokens] Adding <ref> to the vocabulary
[2019-12-07 01:47:40,777 PID:30200 INFO tokenization_utils.py add_tokens] Adding <department> to the vocabulary
[2019-12-07 01:47:40,778 PID:30200 INFO tokenization_utils.py add_tokens] Adding <open> to the vocabulary
[2019-12-07 01:47:40,778 PID:30200 INFO tokenization_utils.py add_tokens] Adding <parking> to the vocabulary
[2019-12-07 01:47:40,778 PID:30200 INFO tokenization_utils.py add_tokens] Adding <departure> to the vocabulary
[2019-12-07 01:47:40,778 PID:30200 INFO tokenization_utils.py add_tokens] Adding <day> to the vocabulary
[2019-12-07 01:47:40,778 PID:30200 INFO tokenization_utils.py add_tokens] Adding <type> to the vocabulary
[2019-12-07 01:47:40,778 PID:30200 INFO tokenization_utils.py add_tokens] Adding <time> to the vocabulary
[2019-12-07 01:47:40,778 PID:30200 INFO tokenization_utils.py add_tokens] Adding <stay> to the vocabulary
[2019-12-07 01:47:40,778 PID:30200 INFO tokenization_utils.py add_tokens] Adding <internet> to the vocabulary
[2019-12-07 01:47:40,778 PID:30200 INFO tokenization_utils.py add_tokens] Adding <phone> to the vocabulary
[2019-12-07 01:47:40,778 PID:30200 INFO tokenization_utils.py add_tokens] Adding <choice> to the vocabulary
[2019-12-07 01:47:40,778 PID:30200 INFO tokenization_utils.py add_tokens] Adding <destination> to the vocabulary
[2019-12-07 01:47:40,778 PID:30200 INFO tokenization_utils.py add_tokens] Adding <name> to the vocabulary
[2019-12-07 01:47:40,778 PID:30200 INFO tokenization_utils.py add_tokens] Adding <addr> to the vocabulary
[2019-12-07 01:47:40,778 PID:30200 INFO tokenization_utils.py add_tokens] Adding <fee> to the vocabulary
[2019-12-07 01:47:40,779 PID:30200 INFO tokenization_utils.py add_tokens] Adding <area> to the vocabulary
[2019-12-07 01:47:40,779 PID:30200 INFO tokenization_utils.py add_tokens] Adding <post> to the vocabulary
[2019-12-07 01:47:40,779 PID:30200 INFO tokenization_utils.py add_tokens] Adding <price> to the vocabulary
[2019-12-07 01:47:40,779 PID:30200 INFO tokenization_utils.py add_tokens] Adding <depart> to the vocabulary
[2019-12-07 01:47:40,779 PID:30200 INFO tokenization_utils.py add_tokens] Adding <id> to the vocabulary
[2019-12-07 01:47:40,779 PID:30200 INFO tokenization_utils.py add_tokens] Adding <food> to the vocabulary
[2019-12-07 01:47:40,779 PID:30200 INFO tokenization_utils.py add_tokens] Adding <stars> to the vocabulary
[2019-12-07 01:47:40,779 PID:30200 INFO tokenization_utils.py add_tokens] Adding <restaurant-inform> to the vocabulary
[2019-12-07 01:47:40,779 PID:30200 INFO tokenization_utils.py add_tokens] Adding <restaurant-recommend> to the vocabulary
[2019-12-07 01:47:40,779 PID:30200 INFO tokenization_utils.py add_tokens] Adding <attraction-request> to the vocabulary
[2019-12-07 01:47:40,779 PID:30200 INFO tokenization_utils.py add_tokens] Adding <hotel-request> to the vocabulary
[2019-12-07 01:47:40,779 PID:30200 INFO tokenization_utils.py add_tokens] Adding <general-welcome> to the vocabulary
[2019-12-07 01:47:40,779 PID:30200 INFO tokenization_utils.py add_tokens] Adding <train-offerbook> to the vocabulary
[2019-12-07 01:47:40,779 PID:30200 INFO tokenization_utils.py add_tokens] Adding <booking-request> to the vocabulary
[2019-12-07 01:47:40,779 PID:30200 INFO tokenization_utils.py add_tokens] Adding <restaurant-nooffer> to the vocabulary
[2019-12-07 01:47:40,780 PID:30200 INFO tokenization_utils.py add_tokens] Adding <hospital-inform> to the vocabulary
[2019-12-07 01:47:40,780 PID:30200 INFO tokenization_utils.py add_tokens] Adding <train-request> to the vocabulary
[2019-12-07 01:47:40,780 PID:30200 INFO tokenization_utils.py add_tokens] Adding <train-nooffer> to the vocabulary
[2019-12-07 01:47:40,780 PID:30200 INFO tokenization_utils.py add_tokens] Adding <general-bye> to the vocabulary
[2019-12-07 01:47:40,780 PID:30200 INFO tokenization_utils.py add_tokens] Adding <hotel-select> to the vocabulary
[2019-12-07 01:47:40,780 PID:30200 INFO tokenization_utils.py add_tokens] Adding <taxi-inform> to the vocabulary
[2019-12-07 01:47:40,780 PID:30200 INFO tokenization_utils.py add_tokens] Adding <attraction-select> to the vocabulary
[2019-12-07 01:47:40,780 PID:30200 INFO tokenization_utils.py add_tokens] Adding <attraction-nooffer> to the vocabulary
[2019-12-07 01:47:40,780 PID:30200 INFO tokenization_utils.py add_tokens] Adding <booking-inform> to the vocabulary
[2019-12-07 01:47:40,780 PID:30200 INFO tokenization_utils.py add_tokens] Adding <train-offerbooked> to the vocabulary
[2019-12-07 01:47:40,780 PID:30200 INFO tokenization_utils.py add_tokens] Adding <general-greet> to the vocabulary
[2019-12-07 01:47:40,780 PID:30200 INFO tokenization_utils.py add_tokens] Adding <train-inform> to the vocabulary
[2019-12-07 01:47:40,780 PID:30200 INFO tokenization_utils.py add_tokens] Adding <train-select> to the vocabulary
[2019-12-07 01:47:40,780 PID:30200 INFO tokenization_utils.py add_tokens] Adding <booking-nobook> to the vocabulary
[2019-12-07 01:47:40,781 PID:30200 INFO tokenization_utils.py add_tokens] Adding <police-inform> to the vocabulary
[2019-12-07 01:47:40,781 PID:30200 INFO tokenization_utils.py add_tokens] Adding <taxi-request> to the vocabulary
[2019-12-07 01:47:40,781 PID:30200 INFO tokenization_utils.py add_tokens] Adding <attraction-inform> to the vocabulary
[2019-12-07 01:47:40,781 PID:30200 INFO tokenization_utils.py add_tokens] Adding <restaurant-select> to the vocabulary
[2019-12-07 01:47:40,781 PID:30200 INFO tokenization_utils.py add_tokens] Adding <hotel-recommend> to the vocabulary
[2019-12-07 01:47:40,781 PID:30200 INFO tokenization_utils.py add_tokens] Adding <booking-book> to the vocabulary
[2019-12-07 01:47:40,781 PID:30200 INFO tokenization_utils.py add_tokens] Adding <hospital-request> to the vocabulary
[2019-12-07 01:47:40,781 PID:30200 INFO tokenization_utils.py add_tokens] Adding <general-reqmore> to the vocabulary
[2019-12-07 01:47:40,781 PID:30200 INFO tokenization_utils.py add_tokens] Adding <restaurant-request> to the vocabulary
[2019-12-07 01:47:40,781 PID:30200 INFO tokenization_utils.py add_tokens] Adding <hotel-nooffer> to the vocabulary
[2019-12-07 01:47:40,781 PID:30200 INFO tokenization_utils.py add_tokens] Adding <hotel-inform> to the vocabulary
[2019-12-07 01:47:40,781 PID:30200 INFO tokenization_utils.py add_tokens] Adding <attraction-recommend> to the vocabulary
[2019-12-07 01:47:40,781 PID:30200 INFO tokenization_utils.py add_tokens] Adding <hotel> to the vocabulary
[2019-12-07 01:47:40,781 PID:30200 INFO tokenization_utils.py add_tokens] Adding <police> to the vocabulary
[2019-12-07 01:47:40,782 PID:30200 INFO tokenization_utils.py add_tokens] Adding <restaurant> to the vocabulary
[2019-12-07 01:47:40,782 PID:30200 INFO tokenization_utils.py add_tokens] Adding <train> to the vocabulary
[2019-12-07 01:47:40,782 PID:30200 INFO tokenization_utils.py add_tokens] Adding <hospital> to the vocabulary
[2019-12-07 01:47:40,782 PID:30200 INFO tokenization_utils.py add_tokens] Adding <taxi> to the vocabulary
[2019-12-07 01:47:40,782 PID:30200 INFO tokenization_utils.py add_tokens] Adding <attraction> to the vocabulary
[2019-12-07 01:47:40,782 PID:30200 INFO tokenization_utils.py add_tokens] Adding [restaurant_phone] to the vocabulary
[2019-12-07 01:47:40,782 PID:30200 INFO tokenization_utils.py add_tokens] Adding [restaurant_reference] to the vocabulary
[2019-12-07 01:47:40,782 PID:30200 INFO tokenization_utils.py add_tokens] Adding [restaurant_postcode] to the vocabulary
[2019-12-07 01:47:40,782 PID:30200 INFO tokenization_utils.py add_tokens] Adding [restaurant_addr] to the vocabulary
[2019-12-07 01:47:40,782 PID:30200 INFO tokenization_utils.py add_tokens] Adding [restaurant_name] to the vocabulary
[2019-12-07 01:47:40,782 PID:30200 INFO tokenization_utils.py add_tokens] Adding [hotel_phone] to the vocabulary
[2019-12-07 01:47:40,782 PID:30200 INFO tokenization_utils.py add_tokens] Adding [hotel_reference] to the vocabulary
[2019-12-07 01:47:40,782 PID:30200 INFO tokenization_utils.py add_tokens] Adding [hotel_postcode] to the vocabulary
[2019-12-07 01:47:40,782 PID:30200 INFO tokenization_utils.py add_tokens] Adding [hotel_addr] to the vocabulary
[2019-12-07 01:47:40,783 PID:30200 INFO tokenization_utils.py add_tokens] Adding [hotel_name] to the vocabulary
[2019-12-07 01:47:40,783 PID:30200 INFO tokenization_utils.py add_tokens] Adding [attraction_phone] to the vocabulary
[2019-12-07 01:47:40,783 PID:30200 INFO tokenization_utils.py add_tokens] Adding [attraction_postcode] to the vocabulary
[2019-12-07 01:47:40,783 PID:30200 INFO tokenization_utils.py add_tokens] Adding [attraction_addr] to the vocabulary
[2019-12-07 01:47:40,783 PID:30200 INFO tokenization_utils.py add_tokens] Adding [attraction_name] to the vocabulary
[2019-12-07 01:47:40,783 PID:30200 INFO tokenization_utils.py add_tokens] Adding [train_reference] to the vocabulary
[2019-12-07 01:47:40,783 PID:30200 INFO tokenization_utils.py add_tokens] Adding [train_id] to the vocabulary
[2019-12-07 01:47:40,783 PID:30200 INFO tokenization_utils.py add_tokens] Adding [taxi_phone] to the vocabulary
[2019-12-07 01:47:40,783 PID:30200 INFO tokenization_utils.py add_tokens] Adding [hospital_phone] to the vocabulary
[2019-12-07 01:47:40,783 PID:30200 INFO tokenization_utils.py add_tokens] Adding [hospital_postcode] to the vocabulary
[2019-12-07 01:47:40,783 PID:30200 INFO tokenization_utils.py add_tokens] Adding [hospital_addr] to the vocabulary
[2019-12-07 01:47:40,783 PID:30200 INFO tokenization_utils.py add_tokens] Adding [hospital_name] to the vocabulary
[2019-12-07 01:47:40,783 PID:30200 INFO tokenization_utils.py add_tokens] Adding [police_phone] to the vocabulary
[2019-12-07 01:47:40,783 PID:30200 INFO tokenization_utils.py add_tokens] Adding [police_postcode] to the vocabulary
[2019-12-07 01:47:40,784 PID:30200 INFO tokenization_utils.py add_tokens] Adding [police_addr] to the vocabulary
[2019-12-07 01:47:40,784 PID:30200 INFO tokenization_utils.py add_tokens] Adding [police_name] to the vocabulary
[2019-12-07 01:47:40,784 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <bos> to the <bos> key of the tokenizer
[2019-12-07 01:47:40,784 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <eos> to the <eos> key of the tokenizer
[2019-12-07 01:47:40,784 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <user> to the <user> key of the tokenizer
[2019-12-07 01:47:40,784 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <system> to the <system> key of the tokenizer
[2019-12-07 01:47:40,784 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <cs> to the <cs> key of the tokenizer
[2019-12-07 01:47:40,784 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <dp> to the <dp> key of the tokenizer
[2019-12-07 01:47:40,784 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <pad> to the <pad> key of the tokenizer
[2019-12-07 01:47:40,784 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <dc> to the <dc> key of the tokenizer
[2019-12-07 01:47:40,784 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <nm> to the <nm> key of the tokenizer
[2019-12-07 01:47:40,784 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <leave> to the <leave> key of the tokenizer
[2019-12-07 01:47:40,784 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <people> to the <people> key of the tokenizer
[2019-12-07 01:47:40,785 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <arrive> to the <arrive> key of the tokenizer
[2019-12-07 01:47:40,785 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <pricerange> to the <pricerange> key of the tokenizer
[2019-12-07 01:47:40,785 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <arriveby> to the <arriveby> key of the tokenizer
[2019-12-07 01:47:40,785 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <ticket> to the <ticket> key of the tokenizer
[2019-12-07 01:47:40,785 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <dest> to the <dest> key of the tokenizer
[2019-12-07 01:47:40,785 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <none> to the <none> key of the tokenizer
[2019-12-07 01:47:40,785 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <leaveat> to the <leaveat> key of the tokenizer
[2019-12-07 01:47:40,785 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <car> to the <car> key of the tokenizer
[2019-12-07 01:47:40,785 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <ref> to the <ref> key of the tokenizer
[2019-12-07 01:47:40,785 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <department> to the <department> key of the tokenizer
[2019-12-07 01:47:40,785 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <open> to the <open> key of the tokenizer
[2019-12-07 01:47:40,785 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <parking> to the <parking> key of the tokenizer
[2019-12-07 01:47:40,785 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <departure> to the <departure> key of the tokenizer
[2019-12-07 01:47:40,785 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <day> to the <day> key of the tokenizer
[2019-12-07 01:47:40,785 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <type> to the <type> key of the tokenizer
[2019-12-07 01:47:40,785 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <time> to the <time> key of the tokenizer
[2019-12-07 01:47:40,786 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <stay> to the <stay> key of the tokenizer
[2019-12-07 01:47:40,786 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <internet> to the <internet> key of the tokenizer
[2019-12-07 01:47:40,786 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <phone> to the <phone> key of the tokenizer
[2019-12-07 01:47:40,786 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <choice> to the <choice> key of the tokenizer
[2019-12-07 01:47:40,786 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <destination> to the <destination> key of the tokenizer
[2019-12-07 01:47:40,786 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <name> to the <name> key of the tokenizer
[2019-12-07 01:47:40,786 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <addr> to the <addr> key of the tokenizer
[2019-12-07 01:47:40,786 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <fee> to the <fee> key of the tokenizer
[2019-12-07 01:47:40,786 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <area> to the <area> key of the tokenizer
[2019-12-07 01:47:40,786 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <post> to the <post> key of the tokenizer
[2019-12-07 01:47:40,786 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <price> to the <price> key of the tokenizer
[2019-12-07 01:47:40,786 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <depart> to the <depart> key of the tokenizer
[2019-12-07 01:47:40,786 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <id> to the <id> key of the tokenizer
[2019-12-07 01:47:40,786 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <food> to the <food> key of the tokenizer
[2019-12-07 01:47:40,786 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <stars> to the <stars> key of the tokenizer
[2019-12-07 01:47:40,787 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <restaurant-inform> to the <restaurant-inform> key of the tokenizer
[2019-12-07 01:47:40,787 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <restaurant-recommend> to the <restaurant-recommend> key of the tokenizer
[2019-12-07 01:47:40,787 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <attraction-request> to the <attraction-request> key of the tokenizer
[2019-12-07 01:47:40,787 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <hotel-request> to the <hotel-request> key of the tokenizer
[2019-12-07 01:47:40,787 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <general-welcome> to the <general-welcome> key of the tokenizer
[2019-12-07 01:47:40,787 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <train-offerbook> to the <train-offerbook> key of the tokenizer
[2019-12-07 01:47:40,787 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <booking-request> to the <booking-request> key of the tokenizer
[2019-12-07 01:47:40,787 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <restaurant-nooffer> to the <restaurant-nooffer> key of the tokenizer
[2019-12-07 01:47:40,787 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <hospital-inform> to the <hospital-inform> key of the tokenizer
[2019-12-07 01:47:40,787 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <train-request> to the <train-request> key of the tokenizer
[2019-12-07 01:47:40,787 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <train-nooffer> to the <train-nooffer> key of the tokenizer
[2019-12-07 01:47:40,787 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <general-bye> to the <general-bye> key of the tokenizer
[2019-12-07 01:47:40,787 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <hotel-select> to the <hotel-select> key of the tokenizer
[2019-12-07 01:47:40,787 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <taxi-inform> to the <taxi-inform> key of the tokenizer
[2019-12-07 01:47:40,787 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <attraction-select> to the <attraction-select> key of the tokenizer
[2019-12-07 01:47:40,788 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <attraction-nooffer> to the <attraction-nooffer> key of the tokenizer
[2019-12-07 01:47:40,788 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <booking-inform> to the <booking-inform> key of the tokenizer
[2019-12-07 01:47:40,788 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <train-offerbooked> to the <train-offerbooked> key of the tokenizer
[2019-12-07 01:47:40,788 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <general-greet> to the <general-greet> key of the tokenizer
[2019-12-07 01:47:40,788 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <train-inform> to the <train-inform> key of the tokenizer
[2019-12-07 01:47:40,788 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <train-select> to the <train-select> key of the tokenizer
[2019-12-07 01:47:40,788 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <booking-nobook> to the <booking-nobook> key of the tokenizer
[2019-12-07 01:47:40,788 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <police-inform> to the <police-inform> key of the tokenizer
[2019-12-07 01:47:40,788 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <taxi-request> to the <taxi-request> key of the tokenizer
[2019-12-07 01:47:40,788 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <attraction-inform> to the <attraction-inform> key of the tokenizer
[2019-12-07 01:47:40,788 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <restaurant-select> to the <restaurant-select> key of the tokenizer
[2019-12-07 01:47:40,788 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <hotel-recommend> to the <hotel-recommend> key of the tokenizer
[2019-12-07 01:47:40,788 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <booking-book> to the <booking-book> key of the tokenizer
[2019-12-07 01:47:40,788 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <hospital-request> to the <hospital-request> key of the tokenizer
[2019-12-07 01:47:40,789 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <general-reqmore> to the <general-reqmore> key of the tokenizer
[2019-12-07 01:47:40,789 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <restaurant-request> to the <restaurant-request> key of the tokenizer
[2019-12-07 01:47:40,789 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <hotel-nooffer> to the <hotel-nooffer> key of the tokenizer
[2019-12-07 01:47:40,789 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <hotel-inform> to the <hotel-inform> key of the tokenizer
[2019-12-07 01:47:40,789 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <attraction-recommend> to the <attraction-recommend> key of the tokenizer
[2019-12-07 01:47:40,789 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <hotel> to the <hotel> key of the tokenizer
[2019-12-07 01:47:40,789 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <police> to the <police> key of the tokenizer
[2019-12-07 01:47:40,789 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <restaurant> to the <restaurant> key of the tokenizer
[2019-12-07 01:47:40,789 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <train> to the <train> key of the tokenizer
[2019-12-07 01:47:40,789 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <hospital> to the <hospital> key of the tokenizer
[2019-12-07 01:47:40,789 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <taxi> to the <taxi> key of the tokenizer
[2019-12-07 01:47:40,789 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning <attraction> to the <attraction> key of the tokenizer
[2019-12-07 01:47:40,789 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning [restaurant_phone] to the [restaurant_phone] key of the tokenizer
[2019-12-07 01:47:40,789 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning [restaurant_reference] to the [restaurant_reference] key of the tokenizer
[2019-12-07 01:47:40,789 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning [restaurant_postcode] to the [restaurant_postcode] key of the tokenizer
[2019-12-07 01:47:40,790 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning [restaurant_addr] to the [restaurant_addr] key of the tokenizer
[2019-12-07 01:47:40,790 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning [restaurant_name] to the [restaurant_name] key of the tokenizer
[2019-12-07 01:47:40,790 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning [hotel_phone] to the [hotel_phone] key of the tokenizer
[2019-12-07 01:47:40,790 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning [hotel_reference] to the [hotel_reference] key of the tokenizer
[2019-12-07 01:47:40,790 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning [hotel_postcode] to the [hotel_postcode] key of the tokenizer
[2019-12-07 01:47:40,790 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning [hotel_addr] to the [hotel_addr] key of the tokenizer
[2019-12-07 01:47:40,790 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning [hotel_name] to the [hotel_name] key of the tokenizer
[2019-12-07 01:47:40,790 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning [attraction_phone] to the [attraction_phone] key of the tokenizer
[2019-12-07 01:47:40,790 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning [attraction_postcode] to the [attraction_postcode] key of the tokenizer
[2019-12-07 01:47:40,790 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning [attraction_addr] to the [attraction_addr] key of the tokenizer
[2019-12-07 01:47:40,790 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning [attraction_name] to the [attraction_name] key of the tokenizer
[2019-12-07 01:47:40,790 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning [train_reference] to the [train_reference] key of the tokenizer
[2019-12-07 01:47:40,790 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning [train_id] to the [train_id] key of the tokenizer
[2019-12-07 01:47:40,790 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning [taxi_phone] to the [taxi_phone] key of the tokenizer
[2019-12-07 01:47:40,790 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning [hospital_phone] to the [hospital_phone] key of the tokenizer
[2019-12-07 01:47:40,790 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning [hospital_postcode] to the [hospital_postcode] key of the tokenizer
[2019-12-07 01:47:40,791 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning [hospital_addr] to the [hospital_addr] key of the tokenizer
[2019-12-07 01:47:40,791 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning [hospital_name] to the [hospital_name] key of the tokenizer
[2019-12-07 01:47:40,791 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning [police_phone] to the [police_phone] key of the tokenizer
[2019-12-07 01:47:40,791 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning [police_postcode] to the [police_postcode] key of the tokenizer
[2019-12-07 01:47:40,791 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning [police_addr] to the [police_addr] key of the tokenizer
[2019-12-07 01:47:40,791 PID:30200 INFO tokenization_utils.py add_special_tokens] Assigning [police_name] to the [police_name] key of the tokenizer
[2019-12-07 01:47:43,143 PID:30200 INFO base.py __init__] ExternalPolicy:
- agent = <convlab.agent.DialogAgent object at 0x7feea13cccf8>
- algorithm_spec = {'action_pdtype': 'Argmax',
 'action_policy': 'default',
 'e2e': {'max_history': 15,
         'model': 'gpt2_v4',
         'model_checkpoint': 'models/v4_1',
         'name': 'Transformer',
         'no_sample': 1,
         'top_p': 0.8},
 'name': 'ExternalPolicy'}
- name = ExternalPolicy
- net_spec = None
- memory_spec = {'max_size': 1, 'name': 'Replay'}
- body = body: {
  "agent": "<convlab.agent.DialogAgent object at 0x7feea13cccf8>",
  "env": "<convlab.env.multiwoz.MultiWozEnv object at 0x7fee56d072b0>",
  "aeb": "(0, 0, 0)",
  "a": 0,
  "e": 0,
  "b": 0,
  "explore_var": NaN,
  "entropy_coef": NaN,
  "loss": NaN,
  "mean_entropy": NaN,
  "mean_grad_norm": NaN,
  "ckpt_total_reward": NaN,
  "total_reward": 0,
  "total_reward_ma": NaN,
  "ma_window": 100,
  "best_reward_ma": -Infinity,
  "eval_reward_ma": NaN,
  "train_df": "Empty DataFrame\nColumns: [epi, t, wall_t, opt_step, frame, fps, total_reward, avg_return, avg_len, avg_success, loss, lr, explore_var, entropy_coef, entropy, grad_norm]\nIndex: []",
  "eval_df": "Empty DataFrame\nColumns: [epi, t, wall_t, opt_step, frame, fps, total_reward, avg_return, avg_len, avg_success, loss, lr, explore_var, entropy_coef, entropy, grad_norm]\nIndex: []",
  "observation_space": "Box(0,)",
  "action_space": "Discrete(0)",
  "observable_dim": {
    "state": 0
  },
  "state_dim": 0,
  "action_dim": 0,
  "is_discrete": true,
  "action_type": "discrete",
  "action_pdtype": "Argmax",
  "ActionPD": "<class 'convlab.lib.distribution.Argmax'>"
}
- action_pdtype = Argmax
- action_policy = <function default at 0x7fee564d4c80>
- policy = <convlab.modules.e2e.multiwoz.Transformer.Transformer.Transformer object at 0x7fee0de1ed30>
[2019-12-07 01:47:43,144 PID:30200 INFO __init__.py __init__] DialogAgent:
- spec = submission4
- a = 0
- agent_spec = {'algorithm': {'action_pdtype': 'Argmax',
               'action_policy': 'default',
               'e2e': {'max_history': 15,
                       'model': 'gpt2_v4',
                       'model_checkpoint': 'models/v4_1',
                       'name': 'Transformer',
                       'no_sample': 1,
                       'top_p': 0.8},
               'name': 'ExternalPolicy'},
 'memory': {'max_size': 1, 'name': 'Replay'},
 'name': 'DialogAgent'}
- name = DialogAgent
- nlu = None
- dst = None
- state_encoder = None
- action_decoder = None
- nlg = None
- body = body: {
  "agent": "<convlab.agent.DialogAgent object at 0x7feea13cccf8>",
  "env": "<convlab.env.multiwoz.MultiWozEnv object at 0x7fee56d072b0>",
  "aeb": "(0, 0, 0)",
  "a": 0,
  "e": 0,
  "b": 0,
  "explore_var": NaN,
  "entropy_coef": NaN,
  "loss": NaN,
  "mean_entropy": NaN,
  "mean_grad_norm": NaN,
  "ckpt_total_reward": NaN,
  "total_reward": 0,
  "total_reward_ma": NaN,
  "ma_window": 100,
  "best_reward_ma": -Infinity,
  "eval_reward_ma": NaN,
  "train_df": "Empty DataFrame\nColumns: [epi, t, wall_t, opt_step, frame, fps, total_reward, avg_return, avg_len, avg_success, loss, lr, explore_var, entropy_coef, entropy, grad_norm]\nIndex: []",
  "eval_df": "Empty DataFrame\nColumns: [epi, t, wall_t, opt_step, frame, fps, total_reward, avg_return, avg_len, avg_success, loss, lr, explore_var, entropy_coef, entropy, grad_norm]\nIndex: []",
  "observation_space": "Box(0,)",
  "action_space": "Discrete(0)",
  "observable_dim": {
    "state": 0
  },
  "state_dim": 0,
  "action_dim": 0,
  "is_discrete": true,
  "action_type": "discrete",
  "action_pdtype": "Argmax",
  "ActionPD": "<class 'convlab.lib.distribution.Argmax'>",
  "memory": "<convlab.agent.memory.replay.Replay object at 0x7fee0d6e8b00>",
  "state": null,
  "encoded_state": null,
  "action": null
}
- algorithm = <convlab.agent.algorithm.external.ExternalPolicy object at 0x7fee0de1ea90>
- warmup_epi = -1
[2019-12-07 01:47:43,896 PID:30200 INFO archival.py load_archive] loading archive file /home/donghoon/.convlab/cache/35863b26c71cbed669f08d3e50030aed24e84e833eb523378b67226d137bedd9.f494dce99f30d2e1786136f7a0a487e643ee8ac430423828d1c0013526d1d7bd
[2019-12-07 01:47:43,896 PID:30200 INFO archival.py load_archive] extracting archive file /home/donghoon/.convlab/cache/35863b26c71cbed669f08d3e50030aed24e84e833eb523378b67226d137bedd9.f494dce99f30d2e1786136f7a0a487e643ee8ac430423828d1c0013526d1d7bd to temp dir /tmp/tmp7cgrh5s8
[2019-12-07 01:47:43,984 PID:30200 INFO params.py pop] type = default
[2019-12-07 01:47:43,984 PID:30200 INFO vocabulary.py from_files] Loading token dictionary from /tmp/tmp7cgrh5s8/vocabulary.
[2019-12-07 01:47:43,997 PID:30200 INFO from_params.py from_params] instantiating class <class 'allennlp.models.model.Model'> from params {'attention': {'matrix_dim': 400, 'type': 'bilinear', 'vector_dim': 400}, 'attention_for_intent': False, 'attention_for_tag': False, 'context_for_intent': True, 'context_for_tag': False, 'dropout': 0.3, 'encoder': {'bidirectional': True, 'dropout': 0.5, 'hidden_size': 200, 'input_size': 178, 'num_layers': 1, 'type': 'lstm'}, 'include_start_end_transitions': False, 'intent_encoder': {'bidirectional': True, 'dropout': 0.5, 'hidden_size': 200, 'input_size': 400, 'num_layers': 1, 'type': 'lstm'}, 'label_encoding': 'BIO', 'regularizer': [['scalar_parameters', {'alpha': 0.1, 'type': 'l2'}]], 'text_field_embedder': {'token_embedders': {'token_characters': {'embedding': {'embedding_dim': 16}, 'encoder': {'conv_layer_activation': 'relu', 'embedding_dim': 16, 'ngram_filter_sizes': [3], 'num_filters': 128, 'type': 'cnn'}, 'type': 'character_encoding'}, 'tokens': {'embedding_dim': 50, 'trainable': True, 'type': 'embedding'}}}, 'type': 'milu'} and extras {'vocab': Vocabulary with namespaces:  intent_labels, Size: 111 || labels, Size: 330 || tokens, Size: 18854 || token_characters, Size: 91 || Non Padded Namespaces: {'*labels', '*tags'}}
[2019-12-07 01:47:43,997 PID:30200 INFO params.py pop] model.type = milu
[2019-12-07 01:47:43,997 PID:30200 INFO from_params.py from_params] instantiating class <class 'convlab.modules.nlu.multiwoz.milu.model.MILU'> from params {'attention': {'matrix_dim': 400, 'type': 'bilinear', 'vector_dim': 400}, 'attention_for_intent': False, 'attention_for_tag': False, 'context_for_intent': True, 'context_for_tag': False, 'dropout': 0.3, 'encoder': {'bidirectional': True, 'dropout': 0.5, 'hidden_size': 200, 'input_size': 178, 'num_layers': 1, 'type': 'lstm'}, 'include_start_end_transitions': False, 'intent_encoder': {'bidirectional': True, 'dropout': 0.5, 'hidden_size': 200, 'input_size': 400, 'num_layers': 1, 'type': 'lstm'}, 'label_encoding': 'BIO', 'regularizer': [['scalar_parameters', {'alpha': 0.1, 'type': 'l2'}]], 'text_field_embedder': {'token_embedders': {'token_characters': {'embedding': {'embedding_dim': 16}, 'encoder': {'conv_layer_activation': 'relu', 'embedding_dim': 16, 'ngram_filter_sizes': [3], 'num_filters': 128, 'type': 'cnn'}, 'type': 'character_encoding'}, 'tokens': {'embedding_dim': 50, 'trainable': True, 'type': 'embedding'}}}} and extras {'vocab': Vocabulary with namespaces:  intent_labels, Size: 111 || labels, Size: 330 || tokens, Size: 18854 || token_characters, Size: 91 || Non Padded Namespaces: {'*labels', '*tags'}}
[2019-12-07 01:47:43,997 PID:30200 INFO from_params.py from_params] instantiating class <class 'allennlp.modules.text_field_embedders.text_field_embedder.TextFieldEmbedder'> from params {'token_embedders': {'token_characters': {'embedding': {'embedding_dim': 16}, 'encoder': {'conv_layer_activation': 'relu', 'embedding_dim': 16, 'ngram_filter_sizes': [3], 'num_filters': 128, 'type': 'cnn'}, 'type': 'character_encoding'}, 'tokens': {'embedding_dim': 50, 'trainable': True, 'type': 'embedding'}}} and extras {'vocab': Vocabulary with namespaces:  intent_labels, Size: 111 || labels, Size: 330 || tokens, Size: 18854 || token_characters, Size: 91 || Non Padded Namespaces: {'*labels', '*tags'}}
[2019-12-07 01:47:43,997 PID:30200 INFO params.py pop] model.text_field_embedder.type = basic
[2019-12-07 01:47:43,998 PID:30200 INFO params.py pop] model.text_field_embedder.embedder_to_indexer_map = None
[2019-12-07 01:47:43,998 PID:30200 INFO params.py pop] model.text_field_embedder.allow_unmatched_keys = False
[2019-12-07 01:47:43,998 PID:30200 INFO from_params.py from_params] instantiating class <class 'allennlp.modules.token_embedders.token_embedder.TokenEmbedder'> from params {'embedding': {'embedding_dim': 16}, 'encoder': {'conv_layer_activation': 'relu', 'embedding_dim': 16, 'ngram_filter_sizes': [3], 'num_filters': 128, 'type': 'cnn'}, 'type': 'character_encoding'} and extras {'vocab': Vocabulary with namespaces:  intent_labels, Size: 111 || labels, Size: 330 || tokens, Size: 18854 || token_characters, Size: 91 || Non Padded Namespaces: {'*labels', '*tags'}}
[2019-12-07 01:47:43,998 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.type = character_encoding
[2019-12-07 01:47:43,998 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.embedding.num_embeddings = None
[2019-12-07 01:47:43,998 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.embedding.vocab_namespace = token_characters
[2019-12-07 01:47:43,998 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.embedding.embedding_dim = 16
[2019-12-07 01:47:43,998 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.embedding.pretrained_file = None
[2019-12-07 01:47:43,998 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.embedding.projection_dim = None
[2019-12-07 01:47:43,998 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.embedding.trainable = True
[2019-12-07 01:47:43,998 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.embedding.padding_index = None
[2019-12-07 01:47:43,998 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.embedding.max_norm = None
[2019-12-07 01:47:43,999 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.embedding.norm_type = 2.0
[2019-12-07 01:47:43,999 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.embedding.scale_grad_by_freq = False
[2019-12-07 01:47:43,999 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.embedding.sparse = False
[2019-12-07 01:47:43,999 PID:30200 INFO from_params.py from_params] instantiating class <class 'allennlp.modules.seq2vec_encoders.seq2vec_encoder.Seq2VecEncoder'> from params {'conv_layer_activation': 'relu', 'embedding_dim': 16, 'ngram_filter_sizes': [3], 'num_filters': 128, 'type': 'cnn'} and extras {}
[2019-12-07 01:47:43,999 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.encoder.type = cnn
[2019-12-07 01:47:43,999 PID:30200 INFO from_params.py from_params] instantiating class <class 'allennlp.modules.seq2vec_encoders.cnn_encoder.CnnEncoder'> from params {'conv_layer_activation': 'relu', 'embedding_dim': 16, 'ngram_filter_sizes': [3], 'num_filters': 128} and extras {}
[2019-12-07 01:47:43,999 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.encoder.embedding_dim = 16
[2019-12-07 01:47:43,999 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.encoder.num_filters = 128
[2019-12-07 01:47:43,999 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.encoder.ngram_filter_sizes = [3]
[2019-12-07 01:47:43,999 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.encoder.conv_layer_activation = relu
[2019-12-07 01:47:44,000 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.encoder.output_dim = None
[2019-12-07 01:47:44,000 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.token_characters.dropout = 0.0
[2019-12-07 01:47:44,000 PID:30200 INFO from_params.py from_params] instantiating class <class 'allennlp.modules.token_embedders.token_embedder.TokenEmbedder'> from params {'embedding_dim': 50, 'trainable': True, 'type': 'embedding'} and extras {'vocab': Vocabulary with namespaces:  intent_labels, Size: 111 || labels, Size: 330 || tokens, Size: 18854 || token_characters, Size: 91 || Non Padded Namespaces: {'*labels', '*tags'}}
[2019-12-07 01:47:44,000 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.tokens.type = embedding
[2019-12-07 01:47:44,000 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.tokens.num_embeddings = None
[2019-12-07 01:47:44,000 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.tokens.vocab_namespace = tokens
[2019-12-07 01:47:44,001 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.tokens.embedding_dim = 50
[2019-12-07 01:47:44,001 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.tokens.pretrained_file = None
[2019-12-07 01:47:44,001 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.tokens.projection_dim = None
[2019-12-07 01:47:44,001 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.tokens.trainable = True
[2019-12-07 01:47:44,001 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.tokens.padding_index = None
[2019-12-07 01:47:44,001 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.tokens.max_norm = None
[2019-12-07 01:47:44,001 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.tokens.norm_type = 2.0
[2019-12-07 01:47:44,001 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.tokens.scale_grad_by_freq = False
[2019-12-07 01:47:44,001 PID:30200 INFO params.py pop] model.text_field_embedder.token_embedders.tokens.sparse = False
[2019-12-07 01:47:44,006 PID:30200 INFO from_params.py from_params] instantiating class <class 'allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder'> from params {'bidirectional': True, 'dropout': 0.5, 'hidden_size': 200, 'input_size': 178, 'num_layers': 1, 'type': 'lstm'} and extras {'vocab': Vocabulary with namespaces:  intent_labels, Size: 111 || labels, Size: 330 || tokens, Size: 18854 || token_characters, Size: 91 || Non Padded Namespaces: {'*labels', '*tags'}}
[2019-12-07 01:47:44,006 PID:30200 INFO params.py pop] model.encoder.type = lstm
[2019-12-07 01:47:44,007 PID:30200 INFO params.py pop] model.encoder.batch_first = True
[2019-12-07 01:47:44,007 PID:30200 INFO params.py pop] model.encoder.stateful = False
[2019-12-07 01:47:44,007 PID:30200 INFO params.py as_dict] Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
[2019-12-07 01:47:44,007 PID:30200 INFO params.py as_dict] CURRENTLY DEFINED PARAMETERS: 
[2019-12-07 01:47:44,007 PID:30200 INFO params.py log_recursively] model.encoder.bidirectional = True
[2019-12-07 01:47:44,007 PID:30200 INFO params.py log_recursively] model.encoder.dropout = 0.5
[2019-12-07 01:47:44,007 PID:30200 INFO params.py log_recursively] model.encoder.hidden_size = 200
[2019-12-07 01:47:44,007 PID:30200 INFO params.py log_recursively] model.encoder.input_size = 178
[2019-12-07 01:47:44,007 PID:30200 INFO params.py log_recursively] model.encoder.num_layers = 1
[2019-12-07 01:47:44,007 PID:30200 INFO params.py log_recursively] model.encoder.batch_first = True
[2019-12-07 01:47:44,011 PID:30200 INFO from_params.py from_params] instantiating class <class 'allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder'> from params {'bidirectional': True, 'dropout': 0.5, 'hidden_size': 200, 'input_size': 400, 'num_layers': 1, 'type': 'lstm'} and extras {'vocab': Vocabulary with namespaces:  intent_labels, Size: 111 || labels, Size: 330 || tokens, Size: 18854 || token_characters, Size: 91 || Non Padded Namespaces: {'*labels', '*tags'}}
[2019-12-07 01:47:44,011 PID:30200 INFO params.py pop] model.intent_encoder.type = lstm
[2019-12-07 01:47:44,011 PID:30200 INFO params.py pop] model.intent_encoder.batch_first = True
[2019-12-07 01:47:44,011 PID:30200 INFO params.py pop] model.intent_encoder.stateful = False
[2019-12-07 01:47:44,011 PID:30200 INFO params.py as_dict] Converting Params object to dict; logging of default values will not occur when dictionary parameters are used subsequently.
[2019-12-07 01:47:44,011 PID:30200 INFO params.py as_dict] CURRENTLY DEFINED PARAMETERS: 
[2019-12-07 01:47:44,011 PID:30200 INFO params.py log_recursively] model.intent_encoder.bidirectional = True
[2019-12-07 01:47:44,011 PID:30200 INFO params.py log_recursively] model.intent_encoder.dropout = 0.5
[2019-12-07 01:47:44,011 PID:30200 INFO params.py log_recursively] model.intent_encoder.hidden_size = 200
[2019-12-07 01:47:44,012 PID:30200 INFO params.py log_recursively] model.intent_encoder.input_size = 400
[2019-12-07 01:47:44,012 PID:30200 INFO params.py log_recursively] model.intent_encoder.num_layers = 1
[2019-12-07 01:47:44,012 PID:30200 INFO params.py log_recursively] model.intent_encoder.batch_first = True
[2019-12-07 01:47:44,017 PID:30200 INFO from_params.py from_params] instantiating class <class 'allennlp.modules.attention.attention.Attention'> from params {'matrix_dim': 400, 'type': 'bilinear', 'vector_dim': 400} and extras {'vocab': Vocabulary with namespaces:  intent_labels, Size: 111 || labels, Size: 330 || tokens, Size: 18854 || token_characters, Size: 91 || Non Padded Namespaces: {'*labels', '*tags'}}
[2019-12-07 01:47:44,017 PID:30200 INFO params.py pop] model.attention.type = bilinear
[2019-12-07 01:47:44,017 PID:30200 INFO from_params.py from_params] instantiating class <class 'allennlp.modules.attention.bilinear_attention.BilinearAttention'> from params {'matrix_dim': 400, 'vector_dim': 400} and extras {'vocab': Vocabulary with namespaces:  intent_labels, Size: 111 || labels, Size: 330 || tokens, Size: 18854 || token_characters, Size: 91 || Non Padded Namespaces: {'*labels', '*tags'}}
[2019-12-07 01:47:44,018 PID:30200 INFO params.py pop] model.attention.vector_dim = 400
[2019-12-07 01:47:44,018 PID:30200 INFO params.py pop] model.attention.matrix_dim = 400
[2019-12-07 01:47:44,018 PID:30200 INFO params.py pop] model.attention.normalize = True
[2019-12-07 01:47:44,019 PID:30200 INFO params.py pop] model.context_for_intent = True
[2019-12-07 01:47:44,019 PID:30200 INFO params.py pop] model.context_for_tag = False
[2019-12-07 01:47:44,019 PID:30200 INFO params.py pop] model.attention_for_intent = False
[2019-12-07 01:47:44,019 PID:30200 INFO params.py pop] model.attention_for_tag = False
[2019-12-07 01:47:44,019 PID:30200 INFO params.py pop] model.sequence_label_namespace = labels
[2019-12-07 01:47:44,019 PID:30200 INFO params.py pop] model.intent_label_namespace = intent_labels
[2019-12-07 01:47:44,019 PID:30200 INFO params.py pop] model.label_encoding = BIO
[2019-12-07 01:47:44,019 PID:30200 INFO params.py pop] model.include_start_end_transitions = False
[2019-12-07 01:47:44,019 PID:30200 INFO params.py pop] model.crf_decoding = False
[2019-12-07 01:47:44,019 PID:30200 INFO params.py pop] model.constrain_crf_decoding = None
[2019-12-07 01:47:44,020 PID:30200 INFO params.py pop] model.focal_loss_gamma = None
[2019-12-07 01:47:44,020 PID:30200 INFO params.py pop] model.nongeneral_intent_weight = 5.0
[2019-12-07 01:47:44,020 PID:30200 INFO params.py pop] model.num_train_examples = None
[2019-12-07 01:47:44,020 PID:30200 INFO params.py pop] model.calculate_span_f1 = None
[2019-12-07 01:47:44,020 PID:30200 INFO params.py pop] model.dropout = 0.3
[2019-12-07 01:47:44,020 PID:30200 INFO params.py pop] model.verbose_metrics = False
[2019-12-07 01:47:44,020 PID:30200 INFO params.py pop] model.regularizer = [['scalar_parameters', {'alpha': 0.1, 'type': 'l2'}]]
[2019-12-07 01:47:44,020 PID:30200 INFO params.py pop] model.regularizer.list.list.type = l2
[2019-12-07 01:47:44,075 PID:30200 INFO initializers.py __call__] Initializing parameters
[2019-12-07 01:47:44,075 PID:30200 INFO initializers.py __call__] Done initializing parameters; the following parameters are using their default initialization from their code
[2019-12-07 01:47:44,075 PID:30200 INFO initializers.py __call__]    attention._bias
[2019-12-07 01:47:44,075 PID:30200 INFO initializers.py __call__]    attention._weight_matrix
[2019-12-07 01:47:44,075 PID:30200 INFO initializers.py __call__]    encoder._module.bias_hh_l0
[2019-12-07 01:47:44,075 PID:30200 INFO initializers.py __call__]    encoder._module.bias_hh_l0_reverse
[2019-12-07 01:47:44,075 PID:30200 INFO initializers.py __call__]    encoder._module.bias_ih_l0
[2019-12-07 01:47:44,076 PID:30200 INFO initializers.py __call__]    encoder._module.bias_ih_l0_reverse
[2019-12-07 01:47:44,076 PID:30200 INFO initializers.py __call__]    encoder._module.weight_hh_l0
[2019-12-07 01:47:44,076 PID:30200 INFO initializers.py __call__]    encoder._module.weight_hh_l0_reverse
[2019-12-07 01:47:44,076 PID:30200 INFO initializers.py __call__]    encoder._module.weight_ih_l0
[2019-12-07 01:47:44,076 PID:30200 INFO initializers.py __call__]    encoder._module.weight_ih_l0_reverse
[2019-12-07 01:47:44,076 PID:30200 INFO initializers.py __call__]    intent_encoder._module.bias_hh_l0
[2019-12-07 01:47:44,076 PID:30200 INFO initializers.py __call__]    intent_encoder._module.bias_hh_l0_reverse
[2019-12-07 01:47:44,076 PID:30200 INFO initializers.py __call__]    intent_encoder._module.bias_ih_l0
[2019-12-07 01:47:44,076 PID:30200 INFO initializers.py __call__]    intent_encoder._module.bias_ih_l0_reverse
[2019-12-07 01:47:44,076 PID:30200 INFO initializers.py __call__]    intent_encoder._module.weight_hh_l0
[2019-12-07 01:47:44,076 PID:30200 INFO initializers.py __call__]    intent_encoder._module.weight_hh_l0_reverse
[2019-12-07 01:47:44,076 PID:30200 INFO initializers.py __call__]    intent_encoder._module.weight_ih_l0
[2019-12-07 01:47:44,076 PID:30200 INFO initializers.py __call__]    intent_encoder._module.weight_ih_l0_reverse
[2019-12-07 01:47:44,076 PID:30200 INFO initializers.py __call__]    intent_projection_layer.bias
[2019-12-07 01:47:44,077 PID:30200 INFO initializers.py __call__]    intent_projection_layer.weight
[2019-12-07 01:47:44,077 PID:30200 INFO initializers.py __call__]    tag_projection_layer._module.bias
[2019-12-07 01:47:44,077 PID:30200 INFO initializers.py __call__]    tag_projection_layer._module.weight
[2019-12-07 01:47:44,077 PID:30200 INFO initializers.py __call__]    text_field_embedder.token_embedder_token_characters._embedding._module.weight
[2019-12-07 01:47:44,077 PID:30200 INFO initializers.py __call__]    text_field_embedder.token_embedder_token_characters._encoder._module.conv_layer_0.bias
[2019-12-07 01:47:44,077 PID:30200 INFO initializers.py __call__]    text_field_embedder.token_embedder_token_characters._encoder._module.conv_layer_0.weight
[2019-12-07 01:47:44,077 PID:30200 INFO initializers.py __call__]    text_field_embedder.token_embedder_tokens.weight
[2019-12-07 01:47:44,083 PID:30200 INFO from_params.py from_params] instantiating class <class 'allennlp.data.dataset_readers.dataset_reader.DatasetReader'> from params {'context_size': 5, 'token_indexers': {'token_characters': {'min_padding_length': 3, 'type': 'characters'}, 'tokens': {'lowercase_tokens': True, 'type': 'single_id'}}, 'type': 'milu'} and extras {}
[2019-12-07 01:47:44,083 PID:30200 INFO params.py pop] dataset_reader.type = milu
[2019-12-07 01:47:44,083 PID:30200 INFO from_params.py from_params] instantiating class <class 'convlab.modules.nlu.multiwoz.milu.dataset_reader.MILUDatasetReader'> from params {'context_size': 5, 'token_indexers': {'token_characters': {'min_padding_length': 3, 'type': 'characters'}, 'tokens': {'lowercase_tokens': True, 'type': 'single_id'}}} and extras {}
[2019-12-07 01:47:44,083 PID:30200 INFO params.py pop] dataset_reader.context_size = 5
[2019-12-07 01:47:44,083 PID:30200 INFO params.py pop] dataset_reader.agent = None
[2019-12-07 01:47:44,083 PID:30200 INFO params.py pop] dataset_reader.random_context_size = True
[2019-12-07 01:47:44,083 PID:30200 INFO params.py pop] dataset_reader.token_delimiter = None
[2019-12-07 01:47:44,084 PID:30200 INFO from_params.py from_params] instantiating class allennlp.data.token_indexers.token_indexer.TokenIndexer from params {'min_padding_length': 3, 'type': 'characters'} and extras {}
[2019-12-07 01:47:44,084 PID:30200 INFO params.py pop] dataset_reader.token_indexers.token_characters.type = characters
[2019-12-07 01:47:44,084 PID:30200 INFO from_params.py from_params] instantiating class allennlp.data.token_indexers.token_characters_indexer.TokenCharactersIndexer from params {'min_padding_length': 3} and extras {}
[2019-12-07 01:47:44,084 PID:30200 INFO params.py pop] dataset_reader.token_indexers.token_characters.namespace = token_characters
[2019-12-07 01:47:44,084 PID:30200 INFO params.py pop] dataset_reader.token_indexers.token_characters.start_tokens = None
[2019-12-07 01:47:44,084 PID:30200 INFO params.py pop] dataset_reader.token_indexers.token_characters.end_tokens = None
[2019-12-07 01:47:44,084 PID:30200 INFO params.py pop] dataset_reader.token_indexers.token_characters.min_padding_length = 3
[2019-12-07 01:47:44,084 PID:30200 INFO from_params.py from_params] instantiating class allennlp.data.token_indexers.token_indexer.TokenIndexer from params {'lowercase_tokens': True, 'type': 'single_id'} and extras {}
[2019-12-07 01:47:44,084 PID:30200 INFO params.py pop] dataset_reader.token_indexers.tokens.type = single_id
[2019-12-07 01:47:44,084 PID:30200 INFO from_params.py from_params] instantiating class allennlp.data.token_indexers.single_id_token_indexer.SingleIdTokenIndexer from params {'lowercase_tokens': True} and extras {}
[2019-12-07 01:47:44,085 PID:30200 INFO params.py pop] dataset_reader.token_indexers.tokens.namespace = tokens
[2019-12-07 01:47:44,085 PID:30200 INFO params.py pop] dataset_reader.token_indexers.tokens.lowercase_tokens = True
[2019-12-07 01:47:44,085 PID:30200 INFO params.py pop] dataset_reader.token_indexers.tokens.start_tokens = None
[2019-12-07 01:47:44,085 PID:30200 INFO params.py pop] dataset_reader.token_indexers.tokens.end_tokens = None
[2019-12-07 01:47:44,085 PID:30200 INFO params.py pop] dataset_reader.lazy = False
[2019-12-07 01:47:44,118 PID:30200 INFO multiwoz.py __init__] MultiWozEnv:
- e = 0
- done = False
- env_spec = {'evaluator': {'name': 'MultiWozEvaluator'},
 'max_frame': 1000,
 'max_t': 40,
 'name': 'multiwoz',
 'nlg': {'is_user': True, 'name': 'MultiwozTemplateNLG'},
 'nlu': {'model_file': 'https://convlab.blob.core.windows.net/models/milu.tar.gz',
         'name': 'MILU'},
 'sys_policy': {'name': 'RuleBasedMultiwozBot'},
 'user_policy': {'name': 'UserPolicyAgendaMultiWoz'}}
- log_frequency = None
- frame_op = None
- frame_op_len = None
- normalize_state = False
- reward_scale = None
- num_envs = 1
- eval_frequency = 100
- name = multiwoz
- max_t = 40
- max_frame = 1000
- is_venv = False
- clock_speed = 1
- clock = <convlab.env.base.Clock object at 0x7fee0de1eb00>
- to_render = False
- action_dim = 0
- observation_dim = 0
- u_env = <convlab.env.multiwoz.MultiWozEnvironment object at 0x7fedf0ef6a20>
- evaluator = <convlab.evaluator.multiwoz.MultiWozEvaluator object at 0x7fedf0aedb00>
- observation_space = Box(0,)
- action_space = Discrete(0)
- observable_dim = {'state': 0}
- is_discrete = True
[2019-12-07 01:47:44,118 PID:30200 INFO logger.py info] Session:
- spec = submission4
- index = 0
- agent = <convlab.agent.DialogAgent object at 0x7feea13cccf8>
- env = <convlab.env.multiwoz.MultiWozEnv object at 0x7fee56d072b0>
- eval_env = <convlab.env.multiwoz.MultiWozEnv object at 0x7fee0de1ea20>
- num_eval = 100
- warmup_epi = -1
[2019-12-07 01:47:44,142 PID:30200 ACT logger.py act] User action: {'Train-Inform': [['Day', 'thursday']]}
[2019-12-07 01:47:44,142 PID:30200 ACT logger.py act] Goal: {'train': {'info': {'destination': 'cambridge', 'day': 'thursday', 'arriveBy': '17:15', 'departure': 'cambridge'}, 'reqt': {'leaveAt': '?', 'price': '?'}, 'book': {'people': '5'}, 'booked': '?'}, 'restaurant': {'info': {'pricerange': 'cheap'}, 'reqt': {'address': '?'}}}
[2019-12-07 01:47:44,142 PID:30200 NL logger.py nl] User utterance: I need to travel on thursday .
[2019-12-07 01:47:44,142 PID:30200 ACT logger.py act] Inferred user action: I need to travel on thursday .
[2019-12-07 01:47:44,142 PID:30200 STATE logger.py state] Dialog state: I need to travel on thursday .
[2019-12-07 01:47:44,578 PID:30200 ACT logger.py act] System action: Where are you departing from and going to?
[2019-12-07 01:47:44,578 PID:30200 NL logger.py nl] System utterance: Where are you departing from and going to?
[2019-12-07 01:47:44,589 PID:30200 ACT logger.py act] Inferred system action: {'Train-Request': [['Depart', '?'], ['Dest', '?']]}
[2019-12-07 01:47:44,589 PID:30200 NL logger.py nl] User utterance: Yes I would like to go to cambridge please . Great I also need a train departs from cambridge .
[2019-12-07 01:47:44,589 PID:30200 ACT logger.py act] Inferred user action: Yes I would like to go to cambridge please . Great I also need a train departs from cambridge .
[2019-12-07 01:47:44,589 PID:30200 STATE logger.py state] Dialog state: Yes I would like to go to cambridge please . Great I also need a train departs from cambridge .
[2019-12-07 01:47:45,115 PID:30200 ACT logger.py act] System action: What time would you like to leave or arrive?
[2019-12-07 01:47:45,115 PID:30200 NL logger.py nl] System utterance: What time would you like to leave or arrive?
[2019-12-07 01:47:45,135 PID:30200 ACT logger.py act] Inferred system action: {'Train-Request': [['Leave', '?'], ['Arrive', '?']]}
[2019-12-07 01:47:45,135 PID:30200 NL logger.py nl] User utterance: I need it to arrive by 17:15 .
[2019-12-07 01:47:45,135 PID:30200 ACT logger.py act] Inferred user action: I need it to arrive by 17:15 .
[2019-12-07 01:47:45,135 PID:30200 STATE logger.py state] Dialog state: I need it to arrive by 17:15 .
[2019-12-07 01:47:46,103 PID:30200 ACT logger.py act] System action: TR4526 arrives at 17:09. Would you like me to book it for you?
[2019-12-07 01:47:46,103 PID:30200 NL logger.py nl] System utterance: TR4526 arrives at 17:09. Would you like me to book it for you?
[2019-12-07 01:47:46,134 PID:30200 ACT logger.py act] Inferred system action: {'Train-Inform': [['Id', 'TR4526'], ['Arrive', '17:09']], 'Train-OfferBook': [['none', 'none']]}
[2019-12-07 01:47:46,134 PID:30200 NL logger.py nl] User utterance: What 's the price ? Could you comfirm the departure time of that train ?
[2019-12-07 01:47:46,135 PID:30200 ACT logger.py act] Inferred user action: What 's the price ? Could you comfirm the departure time of that train ?
[2019-12-07 01:47:46,135 PID:30200 STATE logger.py state] Dialog state: What 's the price ? Could you comfirm the departure time of that train ?
[2019-12-07 01:47:47,139 PID:30200 ACT logger.py act] System action: The departure time is 16:19 and the price is 17.90 pounds.
[2019-12-07 01:47:47,139 PID:30200 NL logger.py nl] System utterance: The departure time is 16:19 and the price is 17.90 pounds.
[2019-12-07 01:47:47,158 PID:30200 ACT logger.py act] Inferred system action: {'Train-Inform': [['Leave', '16:19'], ['Ticket', '17.90 pounds']]}
[2019-12-07 01:47:47,158 PID:30200 NL logger.py nl] User utterance: I need 5 tickets .
[2019-12-07 01:47:47,159 PID:30200 ACT logger.py act] Inferred user action: I need 5 tickets .
[2019-12-07 01:47:47,159 PID:30200 STATE logger.py state] Dialog state: I need 5 tickets .
[2019-12-07 01:47:47,975 PID:30200 ACT logger.py act] System action: Booking was successful, the total fee is 118 pounds payable at the station. Reference number is : 00001214 .
[2019-12-07 01:47:47,975 PID:30200 NL logger.py nl] System utterance: Booking was successful, the total fee is 118 pounds payable at the station. Reference number is : 00001214 .
[2019-12-07 01:47:47,998 PID:30200 ACT logger.py act] Inferred system action: {'Train-OfferBooked': [['Ref', '00001214'], ['Ticket', '118 pounds']]}
[2019-12-07 01:47:47,998 PID:30200 NL logger.py nl] User utterance: Thank you . That 's all I needed .
[2019-12-07 01:47:47,998 PID:30200 ACT logger.py act] Inferred user action: Thank you . That 's all I needed .
[2019-12-07 01:47:47,999 PID:30200 STATE logger.py state] Dialog state: Thank you . That 's all I needed .
[2019-12-07 01:47:48,520 PID:30200 ACT logger.py act] System action: Thank you for using our system!
[2019-12-07 01:47:48,521 PID:30200 NL logger.py nl] System utterance: Thank you for using our system!
[2019-12-07 01:47:48,541 PID:30200 ACT logger.py act] Inferred system action: {'general-bye': [['none', 'none']]}
[2019-12-07 01:47:48,541 PID:30200 NL logger.py nl] User utterance: Actually I need a cheaply priced restaurant . Are there any fitting that description ?
[2019-12-07 01:47:48,541 PID:30200 ACT logger.py act] Inferred user action: Actually I need a cheaply priced restaurant . Are there any fitting that description ?
[2019-12-07 01:47:48,541 PID:30200 STATE logger.py state] Dialog state: Actually I need a cheaply priced restaurant . Are there any fitting that description ?
[2019-12-07 01:47:48,992 PID:30200 ACT logger.py act] System action: What type of food would you like?
[2019-12-07 01:47:48,992 PID:30200 NL logger.py nl] System utterance: What type of food would you like?
[2019-12-07 01:47:49,007 PID:30200 ACT logger.py act] Inferred system action: {'Restaurant-Request': [['Food', '?']]}
[2019-12-07 01:47:49,007 PID:30200 NL logger.py nl] User utterance: Do you have don't care food ?
[2019-12-07 01:47:49,007 PID:30200 ACT logger.py act] Inferred user action: Do you have don't care food ?
[2019-12-07 01:47:49,008 PID:30200 STATE logger.py state] Dialog state: Do you have don't care food ?
[2019-12-07 01:47:49,453 PID:30200 ACT logger.py act] System action: What type of food would you like?
[2019-12-07 01:47:49,453 PID:30200 NL logger.py nl] System utterance: What type of food would you like?
[2019-12-07 01:47:49,468 PID:30200 ACT logger.py act] Inferred system action: {'Restaurant-Request': [['Food', '?']]}
[2019-12-07 01:47:49,468 PID:30200 NL logger.py nl] User utterance: Yes . This restaurant should serve don't care food too .
[2019-12-07 01:47:49,468 PID:30200 ACT logger.py act] Inferred user action: Yes . This restaurant should serve don't care food too .
[2019-12-07 01:47:49,468 PID:30200 STATE logger.py state] Dialog state: Yes . This restaurant should serve don't care food too .
[2019-12-07 01:47:50,229 PID:30200 ACT logger.py act] System action: There are many restaurants that meet your criteria. Do you have a preference for type of food?
[2019-12-07 01:47:50,229 PID:30200 NL logger.py nl] System utterance: There are many restaurants that meet your criteria. Do you have a preference for type of food?
[2019-12-07 01:47:50,248 PID:30200 ACT logger.py act] Inferred system action: {'Restaurant-Inform': [['Choice', 'many']], 'Restaurant-Request': [['Food', '?']]}
[2019-12-07 01:47:50,248 PID:30200 NL logger.py nl] User utterance: Do you have don't care food ?
[2019-12-07 01:47:50,248 PID:30200 ACT logger.py act] Inferred user action: Do you have don't care food ?
[2019-12-07 01:47:50,248 PID:30200 STATE logger.py state] Dialog state: Do you have don't care food ?
[2019-12-07 01:47:50,849 PID:30200 ACT logger.py act] System action: pizza hut city centre serves italian food.
[2019-12-07 01:47:50,849 PID:30200 NL logger.py nl] System utterance: pizza hut city centre serves italian food.
[2019-12-07 01:47:50,868 PID:30200 ACT logger.py act] Inferred system action: {'Restaurant-Inform': [['Name', 'pizza hut city centre'], ['Food', 'italian']]}
[2019-12-07 01:47:50,868 PID:30200 NL logger.py nl] User utterance: May I have the address ?
[2019-12-07 01:47:50,868 PID:30200 ACT logger.py act] Inferred user action: May I have the address ?
[2019-12-07 01:47:50,868 PID:30200 STATE logger.py state] Dialog state: May I have the address ?
[2019-12-07 01:47:51,363 PID:30200 ACT logger.py act] System action: The address is Regent Street City Centre .
[2019-12-07 01:47:51,363 PID:30200 NL logger.py nl] System utterance: The address is Regent Street City Centre .
[2019-12-07 01:47:51,378 PID:30200 ACT logger.py act] Inferred system action: {'Restaurant-Inform': [['Addr', 'Regent Street City Centre']]}
[2019-12-07 01:47:51,379 PID:30200 NL logger.py nl] User utterance: Thank you , goodbye.
[2019-12-07 01:47:51,379 PID:30200 ACT logger.py act] Inferred user action: Thank you , goodbye.
[2019-12-07 01:47:51,379 PID:30200 STATE logger.py state] Dialog state: Thank you , goodbye.
[2019-12-07 01:47:51,379 PID:30200 NL logger.py nl] ---A dialog session is done---
[2019-12-07 01:47:51,393 PID:30200 ACT logger.py act] User action: {'Hotel-Inform': [['Stars', '4']]}
[2019-12-07 01:47:51,393 PID:30200 ACT logger.py act] Goal: {'hotel': {'info': {'type': 'guesthouse', 'area': 'centre', 'stars': '4'}, 'reqt': {'parking': '?'}}, 'train': {'info': {'destination': 'cambridge', 'day': 'monday', 'arriveBy': '20:00', 'departure': 'peterborough'}, 'reqt': {'trainID': '?'}}}
[2019-12-07 01:47:51,393 PID:30200 NL logger.py nl] User utterance: Are there any 4 stars available ?
[2019-12-07 01:47:51,393 PID:30200 ACT logger.py act] Inferred user action: Are there any 4 stars available ?
[2019-12-07 01:47:51,393 PID:30200 STATE logger.py state] Dialog state: Are there any 4 stars available ?
[2019-12-07 01:47:51,979 PID:30200 ACT logger.py act] System action: Yes, I can help you with that.  What area of town are you looking for?
[2019-12-07 01:47:51,979 PID:30200 NL logger.py nl] System utterance: Yes, I can help you with that.  What area of town are you looking for?
[2019-12-07 01:47:51,994 PID:30200 ACT logger.py act] Inferred system action: {'Hotel-Request': [['Area', '?']]}
[2019-12-07 01:47:51,994 PID:30200 NL logger.py nl] User utterance: I ' m looking for a hotel in the centre .
[2019-12-07 01:47:51,995 PID:30200 ACT logger.py act] Inferred user action: I ' m looking for a hotel in the centre .
[2019-12-07 01:47:51,995 PID:30200 STATE logger.py state] Dialog state: I ' m looking for a hotel in the centre .
[2019-12-07 01:47:52,591 PID:30200 ACT logger.py act] System action: I have many options for you. Do you have a price range in mind?
[2019-12-07 01:47:52,591 PID:30200 NL logger.py nl] System utterance: I have many options for you. Do you have a price range in mind?
[2019-12-07 01:47:52,610 PID:30200 ACT logger.py act] Inferred system action: {'Hotel-Inform': [['Choice', 'many']], 'Hotel-Request': [['Price', '?']]}
[2019-12-07 01:47:52,610 PID:30200 NL logger.py nl] User utterance: Do you have one that is a guesthouse ?
[2019-12-07 01:47:52,610 PID:30200 ACT logger.py act] Inferred user action: Do you have one that is a guesthouse ?
[2019-12-07 01:47:52,610 PID:30200 STATE logger.py state] Dialog state: Do you have one that is a guesthouse ?
[2019-12-07 01:47:53,207 PID:30200 ACT logger.py act] System action: I have 1. Do you have a preference on price range?
[2019-12-07 01:47:53,207 PID:30200 NL logger.py nl] System utterance: I have 1. Do you have a preference on price range?
[2019-12-07 01:47:53,225 PID:30200 ACT logger.py act] Inferred system action: {'Hotel-Inform': [['Choice', '1']], 'Hotel-Request': [['Price', '?']]}
[2019-12-07 01:47:53,225 PID:30200 NL logger.py nl] User utterance: I would like to keep the price don't care .
[2019-12-07 01:47:53,225 PID:30200 ACT logger.py act] Inferred user action: I would like to keep the price don't care .
[2019-12-07 01:47:53,225 PID:30200 STATE logger.py state] Dialog state: I would like to keep the price don't care .
[2019-12-07 01:47:53,777 PID:30200 ACT logger.py act] System action: How about alexander bed and breakfast ? It's cheap.
[2019-12-07 01:47:53,777 PID:30200 NL logger.py nl] System utterance: How about alexander bed and breakfast ? It's cheap.
[2019-12-07 01:47:53,793 PID:30200 ACT logger.py act] Inferred system action: {'Hotel-Recommend': [['Price', 'cheap'], ['Name', 'alexander bed and breakfast']]}
[2019-12-07 01:47:53,794 PID:30200 NL logger.py nl] User utterance: Can you tell me if they have free parking ?
[2019-12-07 01:47:53,794 PID:30200 ACT logger.py act] Inferred user action: Can you tell me if they have free parking ?
[2019-12-07 01:47:53,794 PID:30200 STATE logger.py state] Dialog state: Can you tell me if they have free parking ?
[2019-12-07 01:47:54,526 PID:30200 ACT logger.py act] System action: Yes they do. Would you like me to book it for you?
[2019-12-07 01:47:54,526 PID:30200 NL logger.py nl] System utterance: Yes they do. Would you like me to book it for you?
[2019-12-07 01:47:54,544 PID:30200 ACT logger.py act] Inferred system action: {'Booking-Inform': [['none', 'none']], 'Hotel-Inform': [['Parking', 'none']]}
[2019-12-07 01:47:54,544 PID:30200 NL logger.py nl] User utterance: I need it to depart from peterborough . I 'd like to arrive by 20:00 . This will be for monday . I need to find a train to cambridge please .
[2019-12-07 01:47:54,544 PID:30200 ACT logger.py act] Inferred user action: I need it to depart from peterborough . I 'd like to arrive by 20:00 . This will be for monday . I need to find a train to cambridge please .
[2019-12-07 01:47:54,544 PID:30200 STATE logger.py state] Dialog state: I need it to depart from peterborough . I 'd like to arrive by 20:00 . This will be for monday . I need to find a train to cambridge please .
[2019-12-07 01:47:55,386 PID:30200 ACT logger.py act] System action: TR8868 will arrive at 19:58. Would you like me to book it for you?
[2019-12-07 01:47:55,386 PID:30200 NL logger.py nl] System utterance: TR8868 will arrive at 19:58. Would you like me to book it for you?
[2019-12-07 01:47:55,410 PID:30200 ACT logger.py act] Inferred system action: {'Train-Inform': [['Id', 'TR8868'], ['Arrive', '19:58']], 'Train-OfferBook': [['none', 'none']]}
[2019-12-07 01:47:55,410 PID:30200 NL logger.py nl] User utterance: You were great . Goodbye .
[2019-12-07 01:47:55,410 PID:30200 ACT logger.py act] Inferred user action: You were great . Goodbye .
[2019-12-07 01:47:55,410 PID:30200 STATE logger.py state] Dialog state: You were great . Goodbye .
[2019-12-07 01:47:55,411 PID:30200 NL logger.py nl] ---A dialog session is done---
[2019-12-07 01:47:55,416 PID:30200 ACT logger.py act] User action: {'Attraction-Inform': [['Type', 'college']]}
[2019-12-07 01:47:55,416 PID:30200 ACT logger.py act] Goal: {'attraction': {'info': {'type': 'college'}, 'reqt': {'address': '?', 'area': '?'}}}
[2019-12-07 01:47:55,416 PID:30200 NL logger.py nl] User utterance: I ' m looking for a college type attraction .
[2019-12-07 01:47:55,416 PID:30200 ACT logger.py act] Inferred user action: I ' m looking for a college type attraction .
[2019-12-07 01:47:55,417 PID:30200 STATE logger.py state] Dialog state: I ' m looking for a college type attraction .
[2019-12-07 01:47:55,879 PID:30200 ACT logger.py act] System action: There are many colleges in town. Do you have a preference for the area?
[2019-12-07 01:47:55,879 PID:30200 NL logger.py nl] System utterance: There are many colleges in town. Do you have a preference for the area?
[2019-12-07 01:47:55,893 PID:30200 ACT logger.py act] Inferred system action: {'Attraction-Inform': [['Choice', 'many'], ['Type', 'colleges']], 'Attraction-Request': [['Area', '?']]}
[2019-12-07 01:47:55,894 PID:30200 NL logger.py nl] User utterance: Can you tell me what area it is located in ? Could I get the address for it ?
[2019-12-07 01:47:55,894 PID:30200 ACT logger.py act] Inferred user action: Can you tell me what area it is located in ? Could I get the address for it ?
[2019-12-07 01:47:55,894 PID:30200 STATE logger.py state] Dialog state: Can you tell me what area it is located in ? Could I get the address for it ?
[2019-12-07 01:47:56,197 PID:30200 ACT logger.py act] System action: christ's college is located at saint andrew's street .
[2019-12-07 01:47:56,197 PID:30200 NL logger.py nl] System utterance: christ's college is located at saint andrew's street .
[2019-12-07 01:47:56,215 PID:30200 ACT logger.py act] Inferred system action: {'Attraction-Inform': [['Name', "christ 's college"], ['Addr', "saint andrew 's street"]]}
[2019-12-07 01:47:56,216 PID:30200 NL logger.py nl] User utterance: Thank you . What 's the area ?
[2019-12-07 01:47:56,216 PID:30200 ACT logger.py act] Inferred user action: Thank you . What 's the area ?
[2019-12-07 01:47:56,216 PID:30200 STATE logger.py state] Dialog state: Thank you . What 's the area ?
[2019-12-07 01:47:56,734 PID:30200 ACT logger.py act] System action: christ's college is in the centre. Is there anything else I can help you with?
[2019-12-07 01:47:56,734 PID:30200 NL logger.py nl] System utterance: christ's college is in the centre. Is there anything else I can help you with?
[2019-12-07 01:47:56,755 PID:30200 ACT logger.py act] Inferred system action: {'Attraction-Inform': [['Name', "christ 's college"], ['Area', 'centre']], 'general-reqmore': [['none', 'none']]}
[2019-12-07 01:47:56,755 PID:30200 NL logger.py nl] User utterance: You were great . Goodbye .
[2019-12-07 01:47:56,755 PID:30200 ACT logger.py act] Inferred user action: You were great . Goodbye .
[2019-12-07 01:47:56,755 PID:30200 STATE logger.py state] Dialog state: You were great . Goodbye .
[2019-12-07 01:47:56,756 PID:30200 NL logger.py nl] ---A dialog session is done---
[2019-12-07 01:47:56,769 PID:30200 ACT logger.py act] User action: {'Restaurant-Inform': [['Area', 'centre'], ['Price', 'expensive']]}
[2019-12-07 01:47:56,769 PID:30200 ACT logger.py act] Goal: {'restaurant': {'info': {'pricerange': 'expensive', 'area': 'centre'}, 'reqt': {'phone': '?'}}, 'train': {'info': {'destination': 'cambridge', 'day': 'tuesday', 'departure': 'stansted airport', 'leaveAt': '13:15'}, 'reqt': {'trainID': '?'}}}
[2019-12-07 01:47:56,770 PID:30200 NL logger.py nl] User utterance: I ' m so hungry - can you find me a place to eat in the city centre ? I want to find a expensive priced restaurant .
[2019-12-07 01:47:56,770 PID:30200 ACT logger.py act] Inferred user action: I ' m so hungry - can you find me a place to eat in the city centre ? I want to find a expensive priced restaurant .
[2019-12-07 01:47:56,770 PID:30200 STATE logger.py state] Dialog state: I ' m so hungry - can you find me a place to eat in the city centre ? I want to find a expensive priced restaurant .
[2019-12-07 01:47:57,299 PID:30200 ACT logger.py act] System action: There are many options available.  What type of food are you looking for?
[2019-12-07 01:47:57,299 PID:30200 NL logger.py nl] System utterance: There are many options available.  What type of food are you looking for?
[2019-12-07 01:47:57,316 PID:30200 ACT logger.py act] Inferred system action: {'Restaurant-Inform': [['Choice', 'many']], 'Restaurant-Request': [['Food', '?']]}
[2019-12-07 01:47:57,316 PID:30200 NL logger.py nl] User utterance: May I have their telephone number please ?
[2019-12-07 01:47:57,316 PID:30200 ACT logger.py act] Inferred user action: May I have their telephone number please ?
[2019-12-07 01:47:57,316 PID:30200 STATE logger.py state] Dialog state: May I have their telephone number please ?
[2019-12-07 01:47:57,666 PID:30200 ACT logger.py act] System action: Sure, their phone number is 01223302330 .
[2019-12-07 01:47:57,666 PID:30200 NL logger.py nl] System utterance: Sure, their phone number is 01223302330 .
[2019-12-07 01:47:57,684 PID:30200 ACT logger.py act] Inferred system action: {'Restaurant-Inform': [['Phone', '01223302330']]}
[2019-12-07 01:47:57,684 PID:30200 NL logger.py nl] User utterance: I ' m departing from stansted airport . I ' m looking to travel on tuesday. I am leaving for cambridge. I would like to leave anytime after 13:15 .
[2019-12-07 01:47:57,684 PID:30200 ACT logger.py act] Inferred user action: I ' m departing from stansted airport . I ' m looking to travel on tuesday. I am leaving for cambridge. I would like to leave anytime after 13:15 .
[2019-12-07 01:47:57,684 PID:30200 STATE logger.py state] Dialog state: I ' m departing from stansted airport . I ' m looking to travel on tuesday. I am leaving for cambridge. I would like to leave anytime after 13:15 .
[2019-12-07 01:47:58,450 PID:30200 ACT logger.py act] System action: TR2098 leaves at 13:16. Would you like me to book it for you?
[2019-12-07 01:47:58,450 PID:30200 NL logger.py nl] System utterance: TR2098 leaves at 13:16. Would you like me to book it for you?
[2019-12-07 01:47:58,472 PID:30200 ACT logger.py act] Inferred system action: {'Train-Inform': [['Id', 'TR2098'], ['Leave', '13:16']], 'Train-OfferBook': [['none', 'none']]}
[2019-12-07 01:47:58,472 PID:30200 NL logger.py nl] User utterance: Actually , I ' m all set . Thank you ! Bye !.
[2019-12-07 01:47:58,472 PID:30200 ACT logger.py act] Inferred user action: Actually , I ' m all set . Thank you ! Bye !.
[2019-12-07 01:47:58,472 PID:30200 STATE logger.py state] Dialog state: Actually , I ' m all set . Thank you ! Bye !.
[2019-12-07 01:47:58,472 PID:30200 NL logger.py nl] ---A dialog session is done---
[2019-12-07 01:47:58,477 PID:30200 ACT logger.py act] User action: {'Restaurant-Inform': [['Food', 'italian'], ['Price', 'cheap']]}
[2019-12-07 01:47:58,477 PID:30200 ACT logger.py act] Goal: {'restaurant': {'info': {'food': 'italian', 'pricerange': 'cheap'}, 'reqt': {'phone': '?'}}}
[2019-12-07 01:47:58,478 PID:30200 NL logger.py nl] User utterance: How about a italian restaurant ? I am looking for a cheap restaurant .
[2019-12-07 01:47:58,478 PID:30200 ACT logger.py act] Inferred user action: How about a italian restaurant ? I am looking for a cheap restaurant .
[2019-12-07 01:47:58,478 PID:30200 STATE logger.py state] Dialog state: How about a italian restaurant ? I am looking for a cheap restaurant .
[2019-12-07 01:47:59,025 PID:30200 ACT logger.py act] System action: I have several options for you.  What area of town are you looking for?
[2019-12-07 01:47:59,025 PID:30200 NL logger.py nl] System utterance: I have several options for you.  What area of town are you looking for?
[2019-12-07 01:47:59,040 PID:30200 ACT logger.py act] Inferred system action: {'Hotel-Inform': [['Choice', 'several']], 'Restaurant-Request': [['Area', '?']]}
[2019-12-07 01:47:59,040 PID:30200 NL logger.py nl] User utterance: I 'd like to be in the don't care please .
[2019-12-07 01:47:59,040 PID:30200 ACT logger.py act] Inferred user action: I 'd like to be in the don't care please .
[2019-12-07 01:47:59,040 PID:30200 STATE logger.py state] Dialog state: I 'd like to be in the don't care please .
[2019-12-07 01:47:59,344 PID:30200 ACT logger.py act] System action: How about pizza hut city centre ?
[2019-12-07 01:47:59,344 PID:30200 NL logger.py nl] System utterance: How about pizza hut city centre ?
[2019-12-07 01:47:59,362 PID:30200 ACT logger.py act] Inferred system action: {'Restaurant-Recommend': [['Name', 'pizza hut city centre']]}
[2019-12-07 01:47:59,362 PID:30200 NL logger.py nl] User utterance: I would like their phone number .
[2019-12-07 01:47:59,363 PID:30200 ACT logger.py act] Inferred user action: I would like their phone number .
[2019-12-07 01:47:59,363 PID:30200 STATE logger.py state] Dialog state: I would like their phone number .
[2019-12-07 01:47:59,706 PID:30200 ACT logger.py act] System action: Their phone number is 01223323737 .
[2019-12-07 01:47:59,706 PID:30200 NL logger.py nl] System utterance: Their phone number is 01223323737 .
[2019-12-07 01:47:59,719 PID:30200 ACT logger.py act] Inferred system action: {'Restaurant-Inform': [['Phone', '01223323737']]}
[2019-12-07 01:47:59,719 PID:30200 NL logger.py nl] User utterance: That 's all I need today . Thanks ! Bye !.
[2019-12-07 01:47:59,719 PID:30200 ACT logger.py act] Inferred user action: That 's all I need today . Thanks ! Bye !.
[2019-12-07 01:47:59,719 PID:30200 STATE logger.py state] Dialog state: That 's all I need today . Thanks ! Bye !.
[2019-12-07 01:47:59,719 PID:30200 NL logger.py nl] ---A dialog session is done---
[2019-12-07 01:47:59,725 PID:30200 ACT logger.py act] User action: {'Hotel-Inform': [['Stars', '4']]}
[2019-12-07 01:47:59,725 PID:30200 ACT logger.py act] Goal: {'attraction': {'info': {'area': 'centre'}, 'reqt': {'postcode': '?', 'phone': '?'}}, 'hotel': {'info': {'area': 'centre', 'stars': '4'}, 'book': {'stay': '4', 'people': '1', 'day': 'sunday'}, 'booked': '?'}}
[2019-12-07 01:47:59,725 PID:30200 NL logger.py nl] User utterance: I want a place with a 4 star rating.
[2019-12-07 01:47:59,725 PID:30200 ACT logger.py act] Inferred user action: I want a place with a 4 star rating.
[2019-12-07 01:47:59,725 PID:30200 STATE logger.py state] Dialog state: I want a place with a 4 star rating.
[2019-12-07 01:48:00,158 PID:30200 ACT logger.py act] System action: What area of town are you looking for?
[2019-12-07 01:48:00,158 PID:30200 NL logger.py nl] System utterance: What area of town are you looking for?
[2019-12-07 01:48:00,169 PID:30200 ACT logger.py act] Inferred system action: {'Hotel-Request': [['Area', '?']]}
[2019-12-07 01:48:00,169 PID:30200 NL logger.py nl] User utterance: I need a place to stay in the centre please .
[2019-12-07 01:48:00,169 PID:30200 ACT logger.py act] Inferred user action: I need a place to stay in the centre please .
[2019-12-07 01:48:00,169 PID:30200 STATE logger.py state] Dialog state: I need a place to stay in the centre please .
[2019-12-07 01:48:00,648 PID:30200 ACT logger.py act] System action: What price range are you looking for?
[2019-12-07 01:48:00,649 PID:30200 NL logger.py nl] System utterance: What price range are you looking for?
[2019-12-07 01:48:00,667 PID:30200 ACT logger.py act] Inferred system action: {'Hotel-Request': [['Price', '?']]}
[2019-12-07 01:48:00,667 PID:30200 NL logger.py nl] User utterance: I also need a place to go in the centre .
[2019-12-07 01:48:00,667 PID:30200 ACT logger.py act] Inferred user action: I also need a place to go in the centre .
[2019-12-07 01:48:00,667 PID:30200 STATE logger.py state] Dialog state: I also need a place to go in the centre .
[2019-12-07 01:48:01,225 PID:30200 ACT logger.py act] System action: There are 44 attractions in the centre. Do you have a type of attraction you are interested in?
[2019-12-07 01:48:01,225 PID:30200 NL logger.py nl] System utterance: There are 44 attractions in the centre. Do you have a type of attraction you are interested in?
[2019-12-07 01:48:01,245 PID:30200 ACT logger.py act] Inferred system action: {'Attraction-Inform': [['Choice', '44'], ['Area', 'centre']], 'Attraction-Request': [['Type', '?']]}
[2019-12-07 01:48:01,245 PID:30200 NL logger.py nl] User utterance: I was hoping to see local places while in cambridge . Some don't care would be great .
[2019-12-07 01:48:01,245 PID:30200 ACT logger.py act] Inferred user action: I was hoping to see local places while in cambridge . Some don't care would be great .
[2019-12-07 01:48:01,245 PID:30200 STATE logger.py state] Dialog state: I was hoping to see local places while in cambridge . Some don't care would be great .
[2019-12-07 01:48:01,537 PID:30200 ACT logger.py act] System action: How about adc theatre ?
[2019-12-07 01:48:01,538 PID:30200 NL logger.py nl] System utterance: How about adc theatre ?
[2019-12-07 01:48:01,554 PID:30200 ACT logger.py act] Inferred system action: {'Attraction-Recommend': [['Name', 'adc theatre']]}
[2019-12-07 01:48:01,555 PID:30200 NL logger.py nl] User utterance: Can you give me their phone number please ? I 'll need the postcode .
[2019-12-07 01:48:01,555 PID:30200 ACT logger.py act] Inferred user action: Can you give me their phone number please ? I 'll need the postcode .
[2019-12-07 01:48:01,555 PID:30200 STATE logger.py state] Dialog state: Can you give me their phone number please ? I 'll need the postcode .
[2019-12-07 01:48:02,003 PID:30200 ACT logger.py act] System action: The phone number is 01223300085 and the postcode is cb58as .
[2019-12-07 01:48:02,004 PID:30200 NL logger.py nl] System utterance: The phone number is 01223300085 and the postcode is cb58as .
[2019-12-07 01:48:02,023 PID:30200 ACT logger.py act] Inferred system action: {'Attraction-Inform': [['Post', 'cb58as'], ['Phone', '01223300085']]}
[2019-12-07 01:48:02,023 PID:30200 NL logger.py nl] User utterance: Sunday please . There will be 1 people . How about only 4 nights .
[2019-12-07 01:48:02,023 PID:30200 ACT logger.py act] Inferred user action: Sunday please . There will be 1 people . How about only 4 nights .
[2019-12-07 01:48:02,023 PID:30200 STATE logger.py state] Dialog state: Sunday please . There will be 1 people . How about only 4 nights .
[2019-12-07 01:48:02,479 PID:30200 ACT logger.py act] System action: Booking was successful. 
 Reference number is : [hotel_reference] .
[2019-12-07 01:48:02,480 PID:30200 NL logger.py nl] System utterance: Booking was successful. 
 Reference number is : [hotel_reference] .
[2019-12-07 01:48:02,499 PID:30200 ACT logger.py act] Inferred system action: {}
[2019-12-07 01:48:02,499 PID:30200 NL logger.py nl] User utterance: I want to check in on sunday. There are 1 of us . How about 4 night ? Would that work ?
[2019-12-07 01:48:02,499 PID:30200 ACT logger.py act] Inferred user action: I want to check in on sunday. There are 1 of us . How about 4 night ? Would that work ?
[2019-12-07 01:48:02,499 PID:30200 STATE logger.py state] Dialog state: I want to check in on sunday. There are 1 of us . How about 4 night ? Would that work ?
[2019-12-07 01:48:02,983 PID:30200 ACT logger.py act] System action: Booking was successful. 
 Reference number is : [hotel_reference] .
[2019-12-07 01:48:02,983 PID:30200 NL logger.py nl] System utterance: Booking was successful. 
 Reference number is : [hotel_reference] .
[2019-12-07 01:48:03,004 PID:30200 ACT logger.py act] Inferred system action: {}
[2019-12-07 01:48:03,004 PID:30200 NL logger.py nl] User utterance: Great , can you book that for first day sunday please ? Yes , could you book the hotel room for me for 1 people ? I would like to book it for 4 nights please .
[2019-12-07 01:48:03,004 PID:30200 ACT logger.py act] Inferred user action: Great , can you book that for first day sunday please ? Yes , could you book the hotel room for me for 1 people ? I would like to book it for 4 nights please .
[2019-12-07 01:48:03,004 PID:30200 STATE logger.py state] Dialog state: Great , can you book that for first day sunday please ? Yes , could you book the hotel room for me for 1 people ? I would like to book it for 4 nights please .
[2019-12-07 01:48:03,583 PID:30200 ACT logger.py act] System action: Booking was successful. 
 Reference number is : [hotel_reference] .
[2019-12-07 01:48:03,583 PID:30200 NL logger.py nl] System utterance: Booking was successful. 
 Reference number is : [hotel_reference] .
[2019-12-07 01:48:03,606 PID:30200 ACT logger.py act] Inferred system action: {}
[2019-12-07 01:48:03,606 PID:30200 NL logger.py nl] User utterance: I want to check in on sunday. Yes , could you book the hotel room for me for 1 people ? What about 4 nights ?
[2019-12-07 01:48:03,606 PID:30200 ACT logger.py act] Inferred user action: I want to check in on sunday. Yes , could you book the hotel room for me for 1 people ? What about 4 nights ?
[2019-12-07 01:48:03,606 PID:30200 STATE logger.py state] Dialog state: I want to check in on sunday. Yes , could you book the hotel room for me for 1 people ? What about 4 nights ?
[2019-12-07 01:48:04,268 PID:30200 ACT logger.py act] System action: Booking was successful. 
 Reference number is : [hotel_reference] .
[2019-12-07 01:48:04,268 PID:30200 NL logger.py nl] System utterance: Booking was successful. 
 Reference number is : [hotel_reference] .
[2019-12-07 01:48:04,291 PID:30200 ACT logger.py act] Inferred system action: {}
[2019-12-07 01:48:04,292 PID:30200 NL logger.py nl] User utterance: Sunday please . There will be 1 of us . Can you try booking again for 4 nights ?
[2019-12-07 01:48:04,292 PID:30200 ACT logger.py act] Inferred user action: Sunday please . There will be 1 of us . Can you try booking again for 4 nights ?
[2019-12-07 01:48:04,292 PID:30200 STATE logger.py state] Dialog state: Sunday please . There will be 1 of us . Can you try booking again for 4 nights ?
[2019-12-07 01:48:05,018 PID:30200 ACT logger.py act] System action: Booking was successful. 
 Reference number is : [hotel_reference] .
[2019-12-07 01:48:05,018 PID:30200 NL logger.py nl] System utterance: Booking was successful. 
 Reference number is : [hotel_reference] .
[2019-12-07 01:48:05,040 PID:30200 ACT logger.py act] Inferred system action: {}
[2019-12-07 01:48:05,040 PID:30200 NL logger.py nl] User utterance: On sunday please. There will be 1 of us . Can you try booking again for 4 nights ?
[2019-12-07 01:48:05,040 PID:30200 ACT logger.py act] Inferred user action: On sunday please. There will be 1 of us . Can you try booking again for 4 nights ?
[2019-12-07 01:48:05,041 PID:30200 STATE logger.py state] Dialog state: On sunday please. There will be 1 of us . Can you try booking again for 4 nights ?
[2019-12-07 01:48:05,825 PID:30200 ACT logger.py act] System action: Booking was successful. 
 Reference number is : [hotel_reference] .
[2019-12-07 01:48:05,826 PID:30200 NL logger.py nl] System utterance: Booking was successful. 
 Reference number is : [hotel_reference] .
[2019-12-07 01:48:05,846 PID:30200 ACT logger.py act] Inferred system action: {}
[2019-12-07 01:48:05,846 PID:30200 NL logger.py nl] User utterance: On sunday please. Yes , could you book the hotel room for me for 1 people ? How about 4 night ? Would that work ?
[2019-12-07 01:48:05,846 PID:30200 ACT logger.py act] Inferred user action: On sunday please. Yes , could you book the hotel room for me for 1 people ? How about 4 night ? Would that work ?
[2019-12-07 01:48:05,846 PID:30200 STATE logger.py state] Dialog state: On sunday please. Yes , could you book the hotel room for me for 1 people ? How about 4 night ? Would that work ?
[2019-12-07 01:48:07,208 PID:30200 ACT logger.py act] System action: Booking was successful. 
 Reference number is : 00000030 .
[2019-12-07 01:48:07,208 PID:30200 NL logger.py nl] System utterance: Booking was successful. 
 Reference number is : 00000030 .
[2019-12-07 01:48:07,228 PID:30200 ACT logger.py act] Inferred system action: {'Booking-Book': [['Ref', '00000030']]}
[2019-12-07 01:48:07,228 PID:30200 NL logger.py nl] User utterance: I want to check in on sunday. That will work . Can you make a reservation for 1 people , please ? We 'd like to stay for 4 nights .
[2019-12-07 01:48:07,229 PID:30200 ACT logger.py act] Inferred user action: I want to check in on sunday. That will work . Can you make a reservation for 1 people , please ? We 'd like to stay for 4 nights .
[2019-12-07 01:48:07,229 PID:30200 STATE logger.py state] Dialog state: I want to check in on sunday. That will work . Can you make a reservation for 1 people , please ? We 'd like to stay for 4 nights .
[2019-12-07 01:48:08,569 PID:30200 ACT logger.py act] System action: I have made your reservation and your reference number is 00000002 .
[2019-12-07 01:48:08,570 PID:30200 NL logger.py nl] System utterance: I have made your reservation and your reference number is 00000002 .
[2019-12-07 01:48:08,599 PID:30200 ACT logger.py act] Inferred system action: {'Booking-Book': [['Ref', '00000002']]}
[2019-12-07 01:48:08,600 PID:30200 NL logger.py nl] User utterance: On sunday please. There is going to be 1 of us. How about only 4 nights .
[2019-12-07 01:48:08,600 PID:30200 ACT logger.py act] Inferred user action: On sunday please. There is going to be 1 of us. How about only 4 nights .
[2019-12-07 01:48:08,600 PID:30200 STATE logger.py state] Dialog state: On sunday please. There is going to be 1 of us. How about only 4 nights .
[2019-12-07 01:48:10,076 PID:30200 ACT logger.py act] System action: Booking was successful. 
 Reference number is : 00000002 .
[2019-12-07 01:48:10,076 PID:30200 NL logger.py nl] System utterance: Booking was successful. 
 Reference number is : 00000002 .
[2019-12-07 01:48:10,097 PID:30200 ACT logger.py act] Inferred system action: {'Booking-Book': [['Ref', '00000002']]}
[2019-12-07 01:48:10,097 PID:30200 NL logger.py nl] User utterance: I want to check in on sunday. There are 1 of us . How about only 4 nights .
[2019-12-07 01:48:10,097 PID:30200 ACT logger.py act] Inferred user action: I want to check in on sunday. There are 1 of us . How about only 4 nights .
[2019-12-07 01:48:10,097 PID:30200 STATE logger.py state] Dialog state: I want to check in on sunday. There are 1 of us . How about only 4 nights .
[2019-12-07 01:48:11,791 PID:30200 ACT logger.py act] System action: Booking was successful. 
 Reference number is : 00000002 .
[2019-12-07 01:48:11,791 PID:30200 NL logger.py nl] System utterance: Booking was successful. 
 Reference number is : 00000002 .
[2019-12-07 01:48:11,809 PID:30200 ACT logger.py act] Inferred system action: {'Booking-Book': [['Ref', '00000002']]}
[2019-12-07 01:48:11,810 PID:30200 NL logger.py nl] User utterance: On sunday please. There will be 1 people . What about 4 nights ?
[2019-12-07 01:48:11,810 PID:30200 ACT logger.py act] Inferred user action: On sunday please. There will be 1 people . What about 4 nights ?
[2019-12-07 01:48:11,810 PID:30200 STATE logger.py state] Dialog state: On sunday please. There will be 1 people . What about 4 nights ?
[2019-12-07 01:48:13,163 PID:30200 ACT logger.py act] System action: Booking was successful. 
 Reference number is : [hotel_reference] .
[2019-12-07 01:48:13,163 PID:30200 NL logger.py nl] System utterance: Booking was successful. 
 Reference number is : [hotel_reference] .
[2019-12-07 01:48:13,182 PID:30200 ACT logger.py act] Inferred system action: {}
[2019-12-07 01:48:13,182 PID:30200 NL logger.py nl] User utterance: Sunday please . Actually , I 'd like to book it for 1 people . Can you help with that ? How about 4 night ? Would that work ?
[2019-12-07 01:48:13,183 PID:30200 ACT logger.py act] Inferred user action: Sunday please . Actually , I 'd like to book it for 1 people . Can you help with that ? How about 4 night ? Would that work ?
[2019-12-07 01:48:13,183 PID:30200 STATE logger.py state] Dialog state: Sunday please . Actually , I 'd like to book it for 1 people . Can you help with that ? How about 4 night ? Would that work ?
[2019-12-07 01:48:15,516 PID:30200 ACT logger.py act] System action: Booking was successful. 
 Reference number is : [hotel_reference] . anything else i can help you with?
[2019-12-07 01:48:15,516 PID:30200 NL logger.py nl] System utterance: Booking was successful. 
 Reference number is : [hotel_reference] . anything else i can help you with?
[2019-12-07 01:48:15,553 PID:30200 ACT logger.py act] Inferred system action: {'general-reqmore': [['none', 'none']]}
[2019-12-07 01:48:15,553 PID:30200 NL logger.py nl] User utterance: I need a room starting on sunday . That will work . Can you make a reservation for 1 people , please ? We 'd like to stay for 4 nights .
[2019-12-07 01:48:15,554 PID:30200 ACT logger.py act] Inferred user action: I need a room starting on sunday . That will work . Can you make a reservation for 1 people , please ? We 'd like to stay for 4 nights .
[2019-12-07 01:48:15,554 PID:30200 STATE logger.py state] Dialog state: I need a room starting on sunday . That will work . Can you make a reservation for 1 people , please ? We 'd like to stay for 4 nights .
[2019-12-07 01:48:17,760 PID:30200 ACT logger.py act] System action: Booking was successful. 
 Reference number is : [hotel_reference] . anything else i can help you with?
[2019-12-07 01:48:17,760 PID:30200 NL logger.py nl] System utterance: Booking was successful. 
 Reference number is : [hotel_reference] . anything else i can help you with?
[2019-12-07 01:48:17,790 PID:30200 ACT logger.py act] Inferred system action: {'general-reqmore': [['none', 'none']]}
[2019-12-07 01:48:17,790 PID:30200 NL logger.py nl] User utterance: On sunday please. I would like to book it for 1 people . Thanks . Can you try booking again for 4 nights ?
[2019-12-07 01:48:17,790 PID:30200 ACT logger.py act] Inferred user action: On sunday please. I would like to book it for 1 people . Thanks . Can you try booking again for 4 nights ?
[2019-12-07 01:48:17,790 PID:30200 STATE logger.py state] Dialog state: On sunday please. I would like to book it for 1 people . Thanks . Can you try booking again for 4 nights ?
[2019-12-07 01:48:19,915 PID:30200 ACT logger.py act] System action: Booking was successful. 
 Reference number is : 00000000 .
[2019-12-07 01:48:19,916 PID:30200 NL logger.py nl] System utterance: Booking was successful. 
 Reference number is : 00000000 .
[2019-12-07 01:48:19,940 PID:30200 ACT logger.py act] Inferred system action: {'Booking-Book': [['Ref', '00000000']]}
[2019-12-07 01:48:19,940 PID:30200 NL logger.py nl] User utterance: Sunday please . Yes , could you book the hotel room for me for 1 people ? Let 's try 4 nights .
[2019-12-07 01:48:19,940 PID:30200 ACT logger.py act] Inferred user action: Sunday please . Yes , could you book the hotel room for me for 1 people ? Let 's try 4 nights .
[2019-12-07 01:48:19,940 PID:30200 STATE logger.py state] Dialog state: Sunday please . Yes , could you book the hotel room for me for 1 people ? Let 's try 4 nights .
[2019-12-07 01:48:22,067 PID:30200 ACT logger.py act] System action: Booking was successful. 
 Reference number is : 00000000 .
[2019-12-07 01:48:22,068 PID:30200 NL logger.py nl] System utterance: Booking was successful. 
 Reference number is : 00000000 .
[2019-12-07 01:48:22,090 PID:30200 ACT logger.py act] Inferred system action: {'Booking-Book': [['Ref', '00000000']]}
[2019-12-07 01:48:22,091 PID:30200 NL logger.py nl] User utterance: Ok , have a good day . Goodbye .
[2019-12-07 01:48:22,091 PID:30200 ACT logger.py act] Inferred user action: Ok , have a good day . Goodbye .
[2019-12-07 01:48:22,091 PID:30200 STATE logger.py state] Dialog state: Ok , have a good day . Goodbye .
[2019-12-07 01:48:22,091 PID:30200 NL logger.py nl] ---A dialog session is done---
[2019-12-07 01:48:22,097 PID:30200 ACT logger.py act] User action: {'Hotel-Inform': [['Price', 'cheap']]}
[2019-12-07 01:48:22,097 PID:30200 ACT logger.py act] Goal: {'hotel': {'info': {'pricerange': 'cheap'}, 'reqt': {'address': '?', 'type': '?', 'internet': '?'}, 'book': {'stay': '3', 'people': '6', 'day': 'friday'}, 'fail_book': {'stay': '3', 'people': '6', 'day': 'thursday'}, 'booked': '?'}, 'restaurant': {'info': {'area': 'centre'}, 'reqt': {'address': '?'}}, 'taxi': {'info': {'arriveBy': '14:45'}, 'reqt': {'car type': '?', 'phone': '?'}}}
[2019-12-07 01:48:22,098 PID:30200 NL logger.py nl] User utterance: It needs to be in the cheap price range .
[2019-12-07 01:48:22,098 PID:30200 ACT logger.py act] Inferred user action: It needs to be in the cheap price range .
[2019-12-07 01:48:22,098 PID:30200 STATE logger.py state] Dialog state: It needs to be in the cheap price range .
[2019-12-07 01:48:22,572 PID:30200 ACT logger.py act] System action: What area of town are you looking for?
[2019-12-07 01:48:22,572 PID:30200 NL logger.py nl] System utterance: What area of town are you looking for?
[2019-12-07 01:48:22,587 PID:30200 ACT logger.py act] Inferred system action: {'Hotel-Request': [['Area', '?']], 'Restaurant-Request': [['Area', '?']]}
[2019-12-07 01:48:22,587 PID:30200 NL logger.py nl] User utterance: Do any of them offer internet ? What type of hotel is it ? May I have the address for that hotel ?
[2019-12-07 01:48:22,587 PID:30200 ACT logger.py act] Inferred user action: Do any of them offer internet ? What type of hotel is it ? May I have the address for that hotel ?
[2019-12-07 01:48:22,587 PID:30200 STATE logger.py state] Dialog state: Do any of them offer internet ? What type of hotel is it ? May I have the address for that hotel ?
[2019-12-07 01:48:23,044 PID:30200 ACT logger.py act] System action: alexander bed and breakfast is located at 56 saint barnabas road .
[2019-12-07 01:48:23,044 PID:30200 NL logger.py nl] System utterance: alexander bed and breakfast is located at 56 saint barnabas road .
[2019-12-07 01:48:23,063 PID:30200 ACT logger.py act] Inferred system action: {'Hotel-Inform': [['Name', 'alexander bed and breakfast'], ['Addr', '56 saint barnabas road']]}
[2019-12-07 01:48:23,063 PID:30200 NL logger.py nl] User utterance: Does it have internet ? I am wondering what type of hotel , please .
[2019-12-07 01:48:23,063 PID:30200 ACT logger.py act] Inferred user action: Does it have internet ? I am wondering what type of hotel , please .
[2019-12-07 01:48:23,063 PID:30200 STATE logger.py state] Dialog state: Does it have internet ? I am wondering what type of hotel , please .
[2019-12-07 01:48:23,496 PID:30200 ACT logger.py act] System action: alexander bed and breakfast does have internet.
[2019-12-07 01:48:23,496 PID:30200 NL logger.py nl] System utterance: alexander bed and breakfast does have internet.
[2019-12-07 01:48:23,514 PID:30200 ACT logger.py act] Inferred system action: {'Hotel-Inform': [['Name', 'alexander bed and breakfast'], ['Internet', 'none']]}
[2019-12-07 01:48:23,514 PID:30200 NL logger.py nl] User utterance: What type of hotel is it ?
[2019-12-07 01:48:23,515 PID:30200 ACT logger.py act] Inferred user action: What type of hotel is it ?
[2019-12-07 01:48:23,515 PID:30200 STATE logger.py state] Dialog state: What type of hotel is it ?
[2019-12-07 01:48:23,982 PID:30200 ACT logger.py act] System action: It is a guesthouse.
[2019-12-07 01:48:23,983 PID:30200 NL logger.py nl] System utterance: It is a guesthouse.
[2019-12-07 01:48:23,995 PID:30200 ACT logger.py act] Inferred system action: {'Hotel-Inform': [['Type', 'guesthouse']]}
[2019-12-07 01:48:23,995 PID:30200 NL logger.py nl] User utterance: Great , can you book that for first day thursday please ? There will be 6 people . Let 's try 3 nights .
[2019-12-07 01:48:23,995 PID:30200 ACT logger.py act] Inferred user action: Great , can you book that for first day thursday please ? There will be 6 people . Let 's try 3 nights .
[2019-12-07 01:48:23,995 PID:30200 STATE logger.py state] Dialog state: Great , can you book that for first day thursday please ? There will be 6 people . Let 's try 3 nights .
[2019-12-07 01:48:24,644 PID:30200 ACT logger.py act] System action: Booking was successful. 
 Reference number is : 00000002 .
[2019-12-07 01:48:24,644 PID:30200 NL logger.py nl] System utterance: Booking was successful. 
 Reference number is : 00000002 .
[2019-12-07 01:48:24,661 PID:30200 ACT logger.py act] Inferred system action: {'Booking-Book': [['Ref', '00000002']]}
[2019-12-07 01:48:24,661 PID:30200 NL logger.py nl] User utterance: Thank you that will do .
[2019-12-07 01:48:24,661 PID:30200 ACT logger.py act] Inferred user action: Thank you that will do .
[2019-12-07 01:48:24,661 PID:30200 STATE logger.py state] Dialog state: Thank you that will do .
[2019-12-07 01:48:25,257 PID:30200 ACT logger.py act] System action: Thank you for using our system. Good bye
[2019-12-07 01:48:25,257 PID:30200 NL logger.py nl] System utterance: Thank you for using our system. Good bye
[2019-12-07 01:48:25,273 PID:30200 ACT logger.py act] Inferred system action: {'general-bye': [['none', 'none']]}
[2019-12-07 01:48:25,274 PID:30200 NL logger.py nl] User utterance: I ' m so hungry - can you find me a place to eat in the city centre ?
[2019-12-07 01:48:25,274 PID:30200 ACT logger.py act] Inferred user action: I ' m so hungry - can you find me a place to eat in the city centre ?
[2019-12-07 01:48:25,274 PID:30200 STATE logger.py state] Dialog state: I ' m so hungry - can you find me a place to eat in the city centre ?
[2019-12-07 01:48:25,929 PID:30200 ACT logger.py act] System action: There are many restaurants in the city centre. Do you have a preference for type of food?
[2019-12-07 01:48:25,929 PID:30200 NL logger.py nl] System utterance: There are many restaurants in the city centre. Do you have a preference for type of food?
[2019-12-07 01:48:25,949 PID:30200 ACT logger.py act] Inferred system action: {'Restaurant-Inform': [['Area', 'city centre'], ['Choice', 'many']], 'Restaurant-Request': [['Food', '?']]}
[2019-12-07 01:48:25,949 PID:30200 NL logger.py nl] User utterance: I ' m visiting Cambridge and would like some suggestions for an restaurant which serves don't care .
[2019-12-07 01:48:25,949 PID:30200 ACT logger.py act] Inferred user action: I ' m visiting Cambridge and would like some suggestions for an restaurant which serves don't care .
[2019-12-07 01:48:25,949 PID:30200 STATE logger.py state] Dialog state: I ' m visiting Cambridge and would like some suggestions for an restaurant which serves don't care .
[2019-12-07 01:48:26,674 PID:30200 ACT logger.py act] System action: There are many restaurants in the city centre. Do you have a preference for type of food?
[2019-12-07 01:48:26,674 PID:30200 NL logger.py nl] System utterance: There are many restaurants in the city centre. Do you have a preference for type of food?
[2019-12-07 01:48:26,698 PID:30200 ACT logger.py act] Inferred system action: {'Restaurant-Inform': [['Area', 'city centre'], ['Choice', 'many']], 'Restaurant-Request': [['Food', '?']]}
[2019-12-07 01:48:26,699 PID:30200 NL logger.py nl] User utterance: I 'd like to find a don't care restaurant , if possible .
[2019-12-07 01:48:26,699 PID:30200 ACT logger.py act] Inferred user action: I 'd like to find a don't care restaurant , if possible .
[2019-12-07 01:48:26,699 PID:30200 STATE logger.py state] Dialog state: I 'd like to find a don't care restaurant , if possible .
[2019-12-07 01:48:27,547 PID:30200 ACT logger.py act] System action: There are many restaurants in the city centre. Do you have a preference for type of food?
[2019-12-07 01:48:27,548 PID:30200 NL logger.py nl] System utterance: There are many restaurants in the city centre. Do you have a preference for type of food?
[2019-12-07 01:48:27,573 PID:30200 ACT logger.py act] Inferred system action: {'Restaurant-Inform': [['Area', 'city centre'], ['Choice', 'many']], 'Restaurant-Request': [['Food', '?']]}
[2019-12-07 01:48:27,573 PID:30200 NL logger.py nl] User utterance: Which ever you think is the best , please give me the address .
[2019-12-07 01:48:27,573 PID:30200 ACT logger.py act] Inferred user action: Which ever you think is the best , please give me the address .
[2019-12-07 01:48:27,573 PID:30200 STATE logger.py state] Dialog state: Which ever you think is the best , please give me the address .
[2019-12-07 01:48:28,085 PID:30200 ACT logger.py act] System action: I would recommend pizza hut city centre .
[2019-12-07 01:48:28,085 PID:30200 NL logger.py nl] System utterance: I would recommend pizza hut city centre .
[2019-12-07 01:48:28,103 PID:30200 ACT logger.py act] Inferred system action: {'Restaurant-Recommend': [['Name', 'pizza hut city centre']]}
[2019-12-07 01:48:28,103 PID:30200 NL logger.py nl] User utterance: May I have the address ?
[2019-12-07 01:48:28,104 PID:30200 ACT logger.py act] Inferred user action: May I have the address ?
[2019-12-07 01:48:28,104 PID:30200 STATE logger.py state] Dialog state: May I have the address ?
[2019-12-07 01:48:28,629 PID:30200 ACT logger.py act] System action: The address is Regent Street City Centre .
[2019-12-07 01:48:28,629 PID:30200 NL logger.py nl] System utterance: The address is Regent Street City Centre .
[2019-12-07 01:48:28,644 PID:30200 ACT logger.py act] Inferred system action: {'Restaurant-Inform': [['Addr', 'Regent Street City Centre']]}
[2019-12-07 01:48:28,644 PID:30200 NL logger.py nl] User utterance: I need to arrive by 14:45 .
[2019-12-07 01:48:28,644 PID:30200 ACT logger.py act] Inferred user action: I need to arrive by 14:45 .
[2019-12-07 01:48:28,644 PID:30200 STATE logger.py state] Dialog state: I need to arrive by 14:45 .
[2019-12-07 01:48:29,325 PID:30200 ACT logger.py act] System action: I will need to know the time you would like to arrive.
[2019-12-07 01:48:29,325 PID:30200 NL logger.py nl] System utterance: I will need to know the time you would like to arrive.
[2019-12-07 01:48:29,340 PID:30200 ACT logger.py act] Inferred system action: {'Train-Request': [['Arrive', '?']]}
[2019-12-07 01:48:29,340 PID:30200 NL logger.py nl] User utterance: Please provide the phone number . Please . Can I get the car type for that ?
[2019-12-07 01:48:29,341 PID:30200 ACT logger.py act] Inferred user action: Please provide the phone number . Please . Can I get the car type for that ?
[2019-12-07 01:48:29,341 PID:30200 STATE logger.py state] Dialog state: Please provide the phone number . Please . Can I get the car type for that ?
[2019-12-07 01:48:30,542 PID:30200 ACT logger.py act] System action: The car type is a yellow audi and the contact number is 01223351880 .
[2019-12-07 01:48:30,542 PID:30200 NL logger.py nl] System utterance: The car type is a yellow audi and the contact number is 01223351880 .
[2019-12-07 01:48:30,561 PID:30200 ACT logger.py act] Inferred system action: {'Taxi-Inform': [['Phone', '01223351880'], ['Car', 'yellow audi']]}
[2019-12-07 01:48:30,561 PID:30200 NL logger.py nl] User utterance: Thank you very much , goodbye .
[2019-12-07 01:48:30,561 PID:30200 ACT logger.py act] Inferred user action: Thank you very much , goodbye .
[2019-12-07 01:48:30,561 PID:30200 STATE logger.py state] Dialog state: Thank you very much , goodbye .
[2019-12-07 01:48:30,562 PID:30200 NL logger.py nl] ---A dialog session is done---
[2019-12-07 01:48:30,567 PID:30200 ACT logger.py act] User action: {'Attraction-Inform': [['Area', 'east']]}
[2019-12-07 01:48:30,567 PID:30200 ACT logger.py act] Goal: {'attraction': {'info': {'area': 'east'}, 'reqt': {'address': '?', 'postcode': '?', 'phone': '?'}}, 'hotel': {'info': {'pricerange': 'expensive', 'internet': 'yes'}, 'reqt': {'address': '?', 'postcode': '?'}}, 'taxi': {'info': {'leaveAt': '20:30'}, 'reqt': {'car type': '?', 'phone': '?'}}}
[2019-12-07 01:48:30,567 PID:30200 NL logger.py nl] User utterance: I am also looking for suggestions on places to go in the east of town . Can you help me with that ?
[2019-12-07 01:48:30,567 PID:30200 ACT logger.py act] Inferred user action: I am also looking for suggestions on places to go in the east of town . Can you help me with that ?
[2019-12-07 01:48:30,567 PID:30200 STATE logger.py state] Dialog state: I am also looking for suggestions on places to go in the east of town . Can you help me with that ?
[2019-12-07 01:48:31,129 PID:30200 ACT logger.py act] System action: There are a lot of attractions in the east. Do you have a type of attraction in mind?
[2019-12-07 01:48:31,129 PID:30200 NL logger.py nl] System utterance: There are a lot of attractions in the east. Do you have a type of attraction in mind?
[2019-12-07 01:48:31,148 PID:30200 ACT logger.py act] Inferred system action: {'Attraction-Inform': [['Choice', 'a lot of'], ['Area', 'east']], 'Attraction-Request': [['Type', '?']]}
[2019-12-07 01:48:31,148 PID:30200 NL logger.py nl] User utterance: A don't care type of attraction .
[2019-12-07 01:48:31,148 PID:30200 ACT logger.py act] Inferred user action: A don't care type of attraction .
[2019-12-07 01:48:31,148 PID:30200 STATE logger.py state] Dialog state: A don't care type of attraction .
[2019-12-07 01:48:31,397 PID:30200 ACT logger.py act] System action: How about abbey pool and astroturf pitch ?
[2019-12-07 01:48:31,397 PID:30200 NL logger.py nl] System utterance: How about abbey pool and astroturf pitch ?
[2019-12-07 01:48:31,415 PID:30200 ACT logger.py act] Inferred system action: {'Attraction-Recommend': [['Name', 'abbey pool and astroturf pitch']]}
[2019-12-07 01:48:31,415 PID:30200 NL logger.py nl] User utterance: What is the phone number ? What is the postcode for this place ? What is the address ?
[2019-12-07 01:48:31,415 PID:30200 ACT logger.py act] Inferred user action: What is the phone number ? What is the postcode for this place ? What is the address ?
[2019-12-07 01:48:31,415 PID:30200 STATE logger.py state] Dialog state: What is the phone number ? What is the postcode for this place ? What is the address ?
[2019-12-07 01:48:31,825 PID:30200 ACT logger.py act] System action: The phone number is 01223902088 and the postcode is cb58nt .
[2019-12-07 01:48:31,826 PID:30200 NL logger.py nl] System utterance: The phone number is 01223902088 and the postcode is cb58nt .
[2019-12-07 01:48:31,842 PID:30200 ACT logger.py act] Inferred system action: {'Attraction-Inform': [['Post', 'cb58nt'], ['Phone', '01223902088']]}
[2019-12-07 01:48:31,842 PID:30200 NL logger.py nl] User utterance: Could I get the address for it ?
[2019-12-07 01:48:31,842 PID:30200 ACT logger.py act] Inferred user action: Could I get the address for it ?
[2019-12-07 01:48:31,842 PID:30200 STATE logger.py state] Dialog state: Could I get the address for it ?
[2019-12-07 01:48:32,124 PID:30200 ACT logger.py act] System action: The address is pool way, whitehill road, off newmarket road .
[2019-12-07 01:48:32,125 PID:30200 NL logger.py nl] System utterance: The address is pool way, whitehill road, off newmarket road .
[2019-12-07 01:48:32,143 PID:30200 ACT logger.py act] Inferred system action: {'Attraction-Inform': [['Addr', 'off newmarket road'], ['Addr', 'whitehill road'], ['Addr', 'pool way']]}
[2019-12-07 01:48:32,143 PID:30200 NL logger.py nl] User utterance: I ' m looking for some expensive priced accommodations for my visit . Can you help me with that ? I need one with wifi .
[2019-12-07 01:48:32,143 PID:30200 ACT logger.py act] Inferred user action: I ' m looking for some expensive priced accommodations for my visit . Can you help me with that ? I need one with wifi .
[2019-12-07 01:48:32,143 PID:30200 STATE logger.py state] Dialog state: I ' m looking for some expensive priced accommodations for my visit . Can you help me with that ? I need one with wifi .
[2019-12-07 01:48:32,642 PID:30200 ACT logger.py act] System action: What area would you like to stay in?
[2019-12-07 01:48:32,642 PID:30200 NL logger.py nl] System utterance: What area would you like to stay in?
[2019-12-07 01:48:32,661 PID:30200 ACT logger.py act] Inferred system action: {'Hotel-Request': [['Area', '?']]}
[2019-12-07 01:48:32,661 PID:30200 NL logger.py nl] User utterance: I need it in the don't care , please .
[2019-12-07 01:48:32,661 PID:30200 ACT logger.py act] Inferred user action: I need it in the don't care , please .
[2019-12-07 01:48:32,661 PID:30200 STATE logger.py state] Dialog state: I need it in the don't care , please .
[2019-12-07 01:48:33,158 PID:30200 ACT logger.py act] System action: What area would you like to stay in?
[2019-12-07 01:48:33,158 PID:30200 NL logger.py nl] System utterance: What area would you like to stay in?
[2019-12-07 01:48:33,176 PID:30200 ACT logger.py act] Inferred system action: {'Hotel-Request': [['Area', '?']]}
[2019-12-07 01:48:33,176 PID:30200 NL logger.py nl] User utterance: I need it in the don't care , please .
[2019-12-07 01:48:33,176 PID:30200 ACT logger.py act] Inferred user action: I need it in the don't care , please .
[2019-12-07 01:48:33,176 PID:30200 STATE logger.py state] Dialog state: I need it in the don't care , please .
[2019-12-07 01:48:33,881 PID:30200 ACT logger.py act] System action: I have many options. Do you have a preference for the area?
[2019-12-07 01:48:33,881 PID:30200 NL logger.py nl] System utterance: I have many options. Do you have a preference for the area?
[2019-12-07 01:48:33,898 PID:30200 ACT logger.py act] Inferred system action: {'Hotel-Inform': [['Choice', 'many']], 'Hotel-Request': [['Area', '?']]}
[2019-12-07 01:48:33,898 PID:30200 NL logger.py nl] User utterance: I would prefer the hotel be in the don't care part of town .
[2019-12-07 01:48:33,898 PID:30200 ACT logger.py act] Inferred user action: I would prefer the hotel be in the don't care part of town .
[2019-12-07 01:48:33,898 PID:30200 STATE logger.py state] Dialog state: I would prefer the hotel be in the don't care part of town .
[2019-12-07 01:48:34,411 PID:30200 ACT logger.py act] System action: I would recommend the express by holiday inn cambridge .
[2019-12-07 01:48:34,412 PID:30200 NL logger.py nl] System utterance: I would recommend the express by holiday inn cambridge .
[2019-12-07 01:48:34,431 PID:30200 ACT logger.py act] Inferred system action: {'Hotel-Recommend': [['Name', 'express by holiday inn cambridge']]}
[2019-12-07 01:48:34,431 PID:30200 NL logger.py nl] User utterance: That sounds fine , I just need the postcode though . Could I get their address ?
[2019-12-07 01:48:34,431 PID:30200 ACT logger.py act] Inferred user action: That sounds fine , I just need the postcode though . Could I get their address ?
[2019-12-07 01:48:34,432 PID:30200 STATE logger.py state] Dialog state: That sounds fine , I just need the postcode though . Could I get their address ?
[2019-12-07 01:48:35,296 PID:30200 ACT logger.py act] System action: I'm sorry, but the address for error is allenbell.
[2019-12-07 01:48:35,296 PID:30200 NL logger.py nl] System utterance: I'm sorry, but the address for error is allenbell.
[2019-12-07 01:48:35,315 PID:30200 ACT logger.py act] Inferred system action: {'Hotel-Inform': [['Name', 'allenbell']]}
[2019-12-07 01:48:35,315 PID:30200 NL logger.py nl] User utterance: Actually , can you give me the postcode for that ? Can you give me the address please ?
[2019-12-07 01:48:35,315 PID:30200 ACT logger.py act] Inferred user action: Actually , can you give me the postcode for that ? Can you give me the address please ?
[2019-12-07 01:48:35,315 PID:30200 STATE logger.py state] Dialog state: Actually , can you give me the postcode for that ? Can you give me the address please ?
[2019-12-07 01:48:36,450 PID:30200 ACT logger.py act] System action: The postcode for error is cb21ab .  It is in the expensive price range.
[2019-12-07 01:48:36,450 PID:30200 NL logger.py nl] System utterance: The postcode for error is cb21ab .  It is in the expensive price range.
[2019-12-07 01:48:36,472 PID:30200 ACT logger.py act] Inferred system action: {'Restaurant-Inform': [['Post', 'cb21ab'], ['Price', 'expensive']]}
[2019-12-07 01:48:36,472 PID:30200 NL logger.py nl] User utterance: Can I please have the post code ? Could you give me the address , please ?
[2019-12-07 01:48:36,472 PID:30200 ACT logger.py act] Inferred user action: Can I please have the post code ? Could you give me the address , please ?
[2019-12-07 01:48:36,472 PID:30200 STATE logger.py state] Dialog state: Can I please have the post code ? Could you give me the address , please ?
[2019-12-07 01:48:37,464 PID:30200 ACT logger.py act] System action: I'm sorry, the address for error is allenbell.
[2019-12-07 01:48:37,464 PID:30200 NL logger.py nl] System utterance: I'm sorry, the address for error is allenbell.
[2019-12-07 01:48:37,483 PID:30200 ACT logger.py act] Inferred system action: {'Hotel-Inform': [['Name', 'allenbell']]}
[2019-12-07 01:48:37,483 PID:30200 NL logger.py nl] User utterance: Can I please have the post code ? May I have the address for that hotel ?
[2019-12-07 01:48:37,483 PID:30200 ACT logger.py act] Inferred user action: Can I please have the post code ? May I have the address for that hotel ?
[2019-12-07 01:48:37,483 PID:30200 STATE logger.py state] Dialog state: Can I please have the post code ? May I have the address for that hotel ?
[2019-12-07 01:48:38,562 PID:30200 ACT logger.py act] System action: I'm sorry, the address for error is allenbell.
[2019-12-07 01:48:38,562 PID:30200 NL logger.py nl] System utterance: I'm sorry, the address for error is allenbell.
[2019-12-07 01:48:38,582 PID:30200 ACT logger.py act] Inferred system action: {'Hotel-Inform': [['Name', 'allenbell']]}
[2019-12-07 01:48:38,582 PID:30200 NL logger.py nl] User utterance: Could you provide me with their postcode ? Can you give me the address please ?
[2019-12-07 01:48:38,582 PID:30200 ACT logger.py act] Inferred user action: Could you provide me with their postcode ? Can you give me the address please ?
[2019-12-07 01:48:38,583 PID:30200 STATE logger.py state] Dialog state: Could you provide me with their postcode ? Can you give me the address please ?
[2019-12-07 01:48:39,841 PID:30200 ACT logger.py act] System action: I'm sorry, the address for error is allenbell.
[2019-12-07 01:48:39,841 PID:30200 NL logger.py nl] System utterance: I'm sorry, the address for error is allenbell.
[2019-12-07 01:48:39,862 PID:30200 ACT logger.py act] Inferred system action: {'Hotel-Inform': [['Name', 'allenbell']]}
[2019-12-07 01:48:39,862 PID:30200 NL logger.py nl] User utterance: Can I get their postcode please ? No , i just need their address .
[2019-12-07 01:48:39,862 PID:30200 ACT logger.py act] Inferred user action: Can I get their postcode please ? No , i just need their address .
[2019-12-07 01:48:39,862 PID:30200 STATE logger.py state] Dialog state: Can I get their postcode please ? No , i just need their address .
[2019-12-07 01:48:39,934 PID:30200 INFO archival.py _cleanup_archive_dir] removing temporary unarchived model dir at /tmp/tmp7cgrh5s8
[2019-12-07 01:48:39,935 PID:30200 INFO archival.py _cleanup_archive_dir] removing temporary unarchived model dir at /tmp/tmpv8ic0orc
